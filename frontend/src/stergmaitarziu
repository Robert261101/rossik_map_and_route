//TODO: ZIP+oras+nume+adresa


//Varinata cu mesaje pentur intelegerea busines rule-lui
if (model.Name1 != null && model.Street != null && model.PlaceObj?.ZIP != null && model.PlaceObj?.Title != null && model.PlaceObj?.CountryObj?.CountryCode != null)
{
    InfPro.RulesEngine.Core.RulesEnvironment.Instance.DialogService
        .ShowWarning("Debug", "All required fields are filled. Starting exact duplicate check...");

    var compl = new InfPro.BusinessObjects.Finder.ComplexFinder();

    compl.JoinStatement += " INNER JOIN Place ON Place.PlaceID = Address.PlaceID";
    compl.JoinStatement += " INNER JOIN Country ON Country.CountryID = Place.CountryID";

    // Exclude current address
    compl.AddToken(new InfPro.BusinessObjects.Finder.FinderSingleToken(
        InfPro.BusinessObjects.Finder.ELogicType.And,
        "dbo.Address.AddressID",
        InfPro.BusinessObjects.Finder.ECompareType.NotEquals,
        model.AddressID));

    // CountryCode
    compl.AddToken(new InfPro.BusinessObjects.Finder.FinderSingleToken(
        InfPro.BusinessObjects.Finder.ELogicType.And,
        "dbo.Country.CountryCode",
        InfPro.BusinessObjects.Finder.ECompareType.Equals,
        model.PlaceObj.CountryObj.CountryCode));

    // ZIP
    compl.AddToken(new InfPro.BusinessObjects.Finder.FinderSingleToken(
        InfPro.BusinessObjects.Finder.ELogicType.And,
        "dbo.Place.ZIP",
        InfPro.BusinessObjects.Finder.ECompareType.Equals,
        model.PlaceObj.ZIP));

    // City (Place.Title)
    compl.AddToken(new InfPro.BusinessObjects.Finder.FinderSingleToken(
        InfPro.BusinessObjects.Finder.ELogicType.And,
        "dbo.Place.Title",
        InfPro.BusinessObjects.Finder.ECompareType.Equals,
        model.PlaceObj.Title));

    // Street
    compl.AddToken(new InfPro.BusinessObjects.Finder.FinderSingleToken(
        InfPro.BusinessObjects.Finder.ELogicType.And,
        "dbo.Address.Street",
        InfPro.BusinessObjects.Finder.ECompareType.Equals,
        model.Street));

    // ❗Exact match for Name1
    compl.AddToken(new InfPro.BusinessObjects.Finder.FinderSingleToken(
        InfPro.BusinessObjects.Finder.ELogicType.And,
        "dbo.Address.Name1",
        InfPro.BusinessObjects.Finder.ECompareType.Equals,
        model.Name1));

    // Execute search
    compl.UseDistinct = true;

    InfPro.RulesEngine.Core.RulesEnvironment.Instance.DialogService
        .ShowWarning("Debug", "Running exact duplicate search...");

    var dupes = Setup.Translogica.BL.DAC.AddressDAC.Instance.Find(compl);

    if (dupes != null && dupes.Count > 0)
    {
    
        InfPro.RulesEngine.Core.RulesEnvironment.Instance.DialogService
            .ShowWarning("Adressprüfung", dupes.Count + " exakte doppelte Adressen mit Stadt, Straße, Name1, PLZ und Land gefunden.");

        throw new System.Exception("Există deja o adresă în sistem cu exact aceleași date: nume, stradă, cod poștal, oraș și țară.");
    }
    else
    {
        InfPro.RulesEngine.Core.RulesEnvironment.Instance.DialogService
            .ShowWarning("Debug", "Keine exakten Duplikate gefunden. Code executed successfully.");
    }
}
else
{
    InfPro.RulesEngine.Core.RulesEnvironment.Instance.DialogService
        .ShowWarning("Debug", "Missing required data for exact duplicate check (Name1, Street, ZIP, City or CountryCode).");
}








if (model.Name1 != null && model.Street != null && model.PlaceObj?.ZIP != null && model.PlaceObj?.Title != null && model.PlaceObj?.CountryObj?.CountryCode != null)
{

    var compl = new InfPro.BusinessObjects.Finder.ComplexFinder();

    compl.JoinStatement += " INNER JOIN Place ON Place.PlaceID = Address.PlaceID";
    compl.JoinStatement += " INNER JOIN Country ON Country.CountryID = Place.CountryID";

    // Exclude current address
    compl.AddToken(new InfPro.BusinessObjects.Finder.FinderSingleToken(
        InfPro.BusinessObjects.Finder.ELogicType.And,
        "dbo.Address.AddressID",
        InfPro.BusinessObjects.Finder.ECompareType.NotEquals,
        model.AddressID));

    // CountryCode
    compl.AddToken(new InfPro.BusinessObjects.Finder.FinderSingleToken(
        InfPro.BusinessObjects.Finder.ELogicType.And,
        "dbo.Country.CountryCode",
        InfPro.BusinessObjects.Finder.ECompareType.Equals,
        model.PlaceObj.CountryObj.CountryCode));

    // ZIP
    compl.AddToken(new InfPro.BusinessObjects.Finder.FinderSingleToken(
        InfPro.BusinessObjects.Finder.ELogicType.And,
        "dbo.Place.ZIP",
        InfPro.BusinessObjects.Finder.ECompareType.Equals,
        model.PlaceObj.ZIP));

    // City (Place.Title)
    compl.AddToken(new InfPro.BusinessObjects.Finder.FinderSingleToken(
        InfPro.BusinessObjects.Finder.ELogicType.And,
        "dbo.Place.Title",
        InfPro.BusinessObjects.Finder.ECompareType.Equals,
        model.PlaceObj.Title));

    // Street
    compl.AddToken(new InfPro.BusinessObjects.Finder.FinderSingleToken(
        InfPro.BusinessObjects.Finder.ELogicType.And,
        "dbo.Address.Street",
        InfPro.BusinessObjects.Finder.ECompareType.Equals,
        model.Street));

    // ❗Exact match for Name1
    compl.AddToken(new InfPro.BusinessObjects.Finder.FinderSingleToken(
        InfPro.BusinessObjects.Finder.ELogicType.And,
        "dbo.Address.Name1",
        InfPro.BusinessObjects.Finder.ECompareType.Equals,
        model.Name1));

    // Execute search
    compl.UseDistinct = true;

    var dupes = Setup.Translogica.BL.DAC.AddressDAC.Instance.Find(compl);

    if (dupes != null && dupes.Count > 0)
    {
        
        InfPro.RulesEngine.Core.RulesEnvironment.Instance.DialogService
            .ShowWarning("Adressprüfung", dupes.Count + " exakte doppelte Adressen mit Stadt, Straße, Name1, PLZ und Land gefunden.");

        throw new System.Exception("Există deja o adresă în sistem cu exact aceleași date: nume, stradă, cod poștal, oraș și țară.");
    }
}
else
{
    InfPro.RulesEngine.Core.RulesEnvironment.Instance.DialogService
        .ShowWarning("Debug", "Missing required data for exact duplicate check (Name1, Street, ZIP, City or CountryCode).");
}
