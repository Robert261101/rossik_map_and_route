{"version":3,"sources":["lib/supabase.js","Login.js","AutoCompleteInput.js","TollCalculator.js","MainPage.js","HistoryPage.js","App.js","index.js"],"names":["supabase","createClient","process","Login","_ref","setUser","email","setEmail","useState","password","setPassword","errorMsg","setErrorMsg","navigate","useNavigate","React","createElement","className","onSubmit","async","e","preventDefault","data","error","auth","signInWithPassword","message","sessionStorage","setItem","session","access_token","user","type","value","onChange","target","required","AutoCompleteInput","apiKey","onSelect","query","setQuery","suggestions","setSuggestions","selectedAddress","setSelectedAddress","loading","setLoading","inputRef","useRef","handleSelect","suggestion","address","lat","position","lng","url","encodeURIComponent","response","fetch","json","items","length","console","fetchCoordinates","label","current","blur","style","ref","onKeyDown","key","res","err","onFocus","placeholder","top","left","background","listStyle","padding","margin","border","width","zIndex","map","index","_suggestion$address","onClick","cursor","title","rovinietaPricesCache","fetchRovinietaPrices","countryCalculators","ROU","tollData","_duration","vehicleAxles","_pricesData$ROU","pricesData","vehiclePrices","cost","warn","NLD","_pricesData$NLD","LUX","_pricesData$LUX","DEU","convertToEuro","price","currency","HUN","AUT","FRA","ITA","SVN","SVK","PRT","ESP","BEL","POL","CZE","CHE","amount","rates","exchangeRates","TollCalculator","startCoordinates","endCoordinates","intermediatePoints","vehicleType","rawDuration","rawDistance","onTollUpdate","selectedRoute","tollDetails","setTollDetails","totalCost","tollList","processedRoutes","Set","processTollData","totalDuration","targetCountries","countryDurations","route","sections","forEach","section","tollSystems","summary","system","cc","countryCode","includes","Math","max","duration","countryDays","some","tolls","processTollsFallback","addedCountries","toll","country","has","add","hours","floor","minutes","newTollDetails","tollMap","fares","fare","_section$summary2","sectionMetric","result","axles","name","tollSystem","tollCollectionLocations","locKey","loc","join","costInEuro","min","_section$summary","dummyFare","Object","values","useEffect","id","point","weight","routes","fetchTollData","MainPage","activeTab","setActiveTab","addresses","setAddresses","distance","setDistance","setRoutes","selectedRouteIndex","setSelectedRouteIndex","setVehicleType","EuroPerKm","routeTaxCosts","setRouteTaxCosts","tollCosts","setTollCosts","setDuration","setRawDistance","setRawDuration","isLoading","setIsLoading","mapRef","circleRef","markerGroupRef","apiCallCount","plate","setPlate","identifier","setIdentifier","saveMsg","setSaveMsg","token","localStorage","getItem","computeRouteMetrics","totalDistance","km","costPerKm","getRoute","log","slice","radius","alert","initialCosts","Array","from","initialTollLists","displayRoute","toFixed","getObjects","obj","window","H","Polyline","removeObject","lineString","geo","LineString","fromFlexiblePolyline","polyline","routeLine","strokeColor","lineWidth","addObject","boundingBox","getBoundingBox","getViewModel","setLookAtData","bounds","offsetLatLng","_ref2","distanceKm","angleRad","δ","θ","φ1","PI","λ1","φ2","asin","sin","cos","λ2","atan2","onRightClick","evt","pointer","currentPointer","coord","screenToGeo","viewportX","viewportY","circle","Circle","fillColor","best","center","radiusKm","start","end","bestCost","Infinity","i","via","URL","searchParams","set","_json$routes","_json$routes$","dist","reduce","sum","s","_s$summary","findBestViaInCircle","viaStation","isVia","locationInfo","revUrl","item","reverseGeocode","prev","setTimeout","addEventListener","removeEventListener","defaultLayers","service","Platform","apikey","createDefaultLayers","Map","document","getElementById","vector","normal","zoom","mapevents","Behavior","MapEvents","ui","UI","createDefault","getControl","getViewPort","resize","costPerKmForSelected","onMapViewChange","getZoom","marker","el","__domElement","scale","transform","group","Group","pt","idx","color","innerHTML","body","appendChild","offsetWidth","offsetHeight","removeChild","marginLeft","marginTop","domIcon","DomIcon","DomMarker","icon","volatility","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","coordsWithLabel","newArr","moveUp","moveDown","splice","removeAddress","disabled","parseFloat","isNaN","inputMode","step","raw","trim","replace","parsed","rt","altDistance","altDuration","displayTime","routeTax","handleRouteSelect","Fragment","routeData","date","Date","toISOString","euroPerKm","tollCost","method","headers","Content-Type","Authorization","JSON","stringify","ok","Error","statusText","display","updateTollCostForRoute","HistoryPage","username","App","setAuth","getUser","then","listener","onAuthStateChange","_event","_session$user","subscription","unsubscribe","Router","Routes","Route","path","element","Navigate","to","LoginPage","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.e312f1f2.chunk.js","sourcesContent":["// src/lib/supabase.js\r\nimport { createClient } from '@supabase/supabase-js';\r\nexport const supabase = createClient(\r\n  process.env.SUPABASE_URL,\r\n  process.env.SUPABASE_ANON_KEY\r\n);\r\n","// frontend/src/Login.js\r\nimport React, { useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { supabase } from './lib/supabase'\r\n\r\nexport default function Login({ setUser }) {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault();\r\n    setErrorMsg('');\r\n\r\n    // Supabase sign-in by email/password:\r\n    const { data, error } = await supabase.auth.signInWithPassword({\r\n      email,                // ← must match your new email column\r\n      password\r\n    });\r\n\r\n    if (error) {\r\n      setErrorMsg(error.message);\r\n      return;\r\n    }\r\n\r\n    // store session token\r\n    sessionStorage.setItem('sb_token', data.session.access_token)\r\n    // decode payload for role, etc. (if you stored custom claims)\r\n    const payload = data.session.user  // Supabase user object\r\n    setUser(data.user);\r\n    navigate('/');\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-100 flex items-center justify-center\">\r\n      <div className=\"bg-white p-8 rounded-xl shadow-lg w-full max-w-sm\">\r\n        <h2 className=\"text-2xl font-semibold text-center mb-6\">Log in to Rossik</h2>\r\n        <form onSubmit={handleLogin} className=\"space-y-4\">\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700\">Email</label>\r\n            <input\r\n              className=\"w-full border p-2 rounded focus:outline-none focus:ring focus:border-blue-500\"\r\n              type=\"email\"\r\n              value={email}\r\n              onChange={e => setEmail(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700\">Password</label>\r\n            <input\r\n              className=\"w-full border p-2 rounded focus:outline-none focus:ring focus:border-blue-500\"\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          {errorMsg && <p className=\"text-red-500 text-sm text-center\">{errorMsg}</p>}\r\n          <button\r\n            type=\"submit\"\r\n            className=\"w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700 transition\"\r\n          >\r\n            Login\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // src/Login.js\r\n// import React, { useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import { supabase } from '../lib/supabase';\r\n\r\n// export default function Login({ setUser }) {\r\n//   const [email, setEmail] = useState('');\r\n//   const [password, setPassword] = useState('');\r\n//   const [errorMsg, setErrorMsg] = useState('');\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleLogin = async (e) => {\r\n//     e.preventDefault();\r\n//     setErrorMsg('');\r\n\r\n//     const { data, error } = await supabase.auth.signInWithPassword({ email, password });\r\n\r\n//     if (error) {\r\n//       setErrorMsg(error.message);\r\n//       return;\r\n//     }\r\n\r\n//     sessionStorage.setItem('token', data.session.access_token);\r\n//     setUser(data.user);\r\n//     navigate('/');\r\n\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"min-h-screen bg-gray-100 flex items-center justify-center\">\r\n//       <div className=\"bg-white p-8 rounded-xl shadow-lg w-full max-w-sm\">\r\n//         <h2 className=\"text-2xl font-semibold text-center mb-6 text-gray-800\">\r\n//           Login to Rossik\r\n//         </h2>\r\n//         <form onSubmit={handleLogin} className=\"space-y-4\">\r\n//           <div>\r\n//             <label className=\"block text-sm font-medium text-gray-700\">Email</label>\r\n//             <input\r\n//               className=\"w-full border p-2 rounded focus:outline-none focus:ring focus:border-blue-500\"\r\n//               type=\"email\"\r\n//               value={email}\r\n//               onChange={(e) => setEmail(e.target.value)}\r\n//               required\r\n//             />\r\n//           </div>\r\n//           <div>\r\n//             <label className=\"block text-sm font-medium text-gray-700\">Password</label>\r\n//             <input\r\n//               className=\"w-full border p-2 rounded focus:outline-none focus:ring focus:border-blue-500\"\r\n//               type=\"password\"\r\n//               value={password}\r\n//               onChange={(e) => setPassword(e.target.value)}\r\n//               required\r\n//             />\r\n//           </div>\r\n//           {errorMsg && (\r\n//             <p className=\"text-red-500 text-sm text-center\">{errorMsg}</p>\r\n//           )}\r\n//           <button\r\n//             type=\"submit\"\r\n//             className=\"w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700 transition\"\r\n//           >\r\n//             Login\r\n//           </button>\r\n//         </form>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // Login.js\r\n// import React, { useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import { supabase } from './lib/supabase';\r\n\r\n// export default function Login({ setUser }) {\r\n//   const [username, setUsername] = useState('');\r\n//   const [password, setPassword] = useState('');\r\n//   const [errorMsg, setErrorMsg] = useState('');\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleLogin = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       const res = await fetch('http://localhost:4000/api/auth/login', {\r\n//         method: 'POST',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//         body: JSON.stringify({ username, password }),\r\n//       });\r\n\r\n//       if (!res.ok) throw new Error((await res.json()).message || 'Login failed');\r\n//       const data = await res.json();\r\n\r\n//       // 1. Salvează tokenul în sessionStorage\r\n//       sessionStorage.setItem('token', data.token);\r\n\r\n//       // 2. Decodează JWT și extrage user info\r\n//       const payload = JSON.parse(atob(data.token.split('.')[1]));\r\n//       setUser({ username: payload.username, role: payload.role });\r\n\r\n//       // 3. Redirecționează la pagina principală\r\n//       navigate('/');\r\n\r\n//     } catch (err) {\r\n//       setErrorMsg(err.message);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"min-h-screen bg-gray-100 flex items-center justify-center\">\r\n//       <div className=\"bg-white p-8 rounded-xl shadow-lg w-full max-w-sm\">\r\n//         <h2 className=\"text-2xl font-semibold text-center mb-6 text-gray-800\">Log in to Rossik</h2>\r\n//         <form onSubmit={handleLogin} className=\"space-y-4\">\r\n//           <div>\r\n//             <label className=\"block text-sm font-medium text-gray-700\">Username</label>\r\n//             <input\r\n//               className=\"w-full border p-2 rounded focus:outline-none focus:ring focus:border-blue-500\"\r\n//               type=\"text\"\r\n//               value={username}\r\n//               onChange={(e) => setUsername(e.target.value)}\r\n//               required\r\n//             />\r\n//           </div>\r\n//           <div>\r\n//             <label className=\"block text-sm font-medium text-gray-700\">Password</label>\r\n//             <input\r\n//               className=\"w-full border p-2 rounded focus:outline-none focus:ring focus:border-blue-500\"\r\n//               type=\"password\"\r\n//               value={password}\r\n//               onChange={(e) => setPassword(e.target.value)}\r\n//               required\r\n//             />\r\n//           </div>\r\n//           {errorMsg && (\r\n//             <p className=\"text-red-500 text-sm text-center\">{errorMsg}</p>\r\n//           )}\r\n//           <button\r\n//             type=\"submit\"\r\n//             className=\"w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700 transition\"\r\n//           >\r\n//             Login\r\n//           </button>\r\n//         </form>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n","import React, { useState, useEffect, useRef } from 'react';\r\n\r\nconst AutoCompleteInput = ({ apiKey, onSelect }) => {\r\n  const [query, setQuery] = useState('');\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const [selectedAddress, setSelectedAddress] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const inputRef = useRef(null);\r\n\r\n  // handler care face fetch doar când apeși Enter\r\n  const handleKeyDown = async (e) => {\r\n    if (e.key !== 'Enter') return;\r\n    e.preventDefault();              // nu lasă form-ul să trimită\r\n    if (!apiKey || query.length < 3) return;\r\n    setLoading(true);\r\n    try {\r\n      const url = `https://autocomplete.search.hereapi.com/v1/autocomplete`\r\n        + `?q=${encodeURIComponent(query)}&apiKey=${apiKey}`;\r\n      const res = await fetch(url);\r\n      const data = await res.json();\r\n      setSuggestions(data.items || []);\r\n    } catch (err) {\r\n      console.error(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchCoordinates = async (address) => {\r\n    const url = `https://geocode.search.hereapi.com/v1/geocode?q=${encodeURIComponent(address)}&apiKey=${apiKey}`;\r\n    try {\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      if (data.items && data.items.length > 0) return data.items[0].position;\r\n    } catch (error) {\r\n      console.error('Eroare:', error);\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const handleSelect = async (suggestion) => {\r\n    if (!suggestion || !suggestion.address) return;\r\n\r\n    let lat = suggestion.position ? suggestion.position.lat : null;\r\n    let lng = suggestion.position ? suggestion.position.lng : null;\r\n    if (lat === null || lng === null) {\r\n      const position = await fetchCoordinates(suggestion.address.label);\r\n      if (position) {\r\n        lat = position.lat;\r\n        lng = position.lng;\r\n      } else return;\r\n    }\r\n\r\n    setSelectedAddress(suggestion.address.label); // Salvează adresa selectată\r\n    setQuery('');\r\n    setSuggestions([]);\r\n    if (inputRef.current) {\r\n      inputRef.current.blur();\r\n    }\r\n    onSelect({ lat, lng, label: suggestion.address.label });\r\n  };\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <input\r\n        type=\"text\"\r\n        ref={inputRef}\r\n        value={query}\r\n        onKeyDown={handleKeyDown}\r\n        onFocus={() => {\r\n          // Permite modificarea adresei: resetează selectedAddress doar la focus\r\n          if (selectedAddress) {\r\n            setSelectedAddress(null);\r\n          }\r\n        }}\r\n        onChange={(e) => {\r\n          setQuery(e.target.value);\r\n        }}\r\n        placeholder=\"Enter address or postal code\"\r\n      />\r\n      {loading ? (\r\n        <div style={{ position: 'absolute', top: '100%', left: 0 }}>\r\n          Loading...\r\n        </div>\r\n      ) : null}\r\n\r\n      {suggestions.length > 0 && !selectedAddress ? (\r\n        <ul\r\n          style={{\r\n            position: 'absolute',\r\n            top: '100%',\r\n            left: 0,\r\n            background: 'white',\r\n            listStyle: 'none',\r\n            padding: '5px',\r\n            margin: 0,\r\n            border: '1px solid #ccc',\r\n            width: '100%',\r\n            zIndex: 999,\r\n          }}\r\n        >\r\n          {suggestions.map((suggestion, index) => (\r\n            <li\r\n              key={index}\r\n              onClick={() => handleSelect(suggestion)}\r\n              style={{ cursor: 'pointer', padding: '5px 0' }}\r\n            >\r\n              {suggestion.address?.label || suggestion.title}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AutoCompleteInput;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\n\r\n// Caching pentru prețurile de rovinietă (dacă este necesar)\r\nlet rovinietaPricesCache = null;\r\n\r\nconst fetchRovinietaPrices = async () => {\r\n  if (rovinietaPricesCache) return rovinietaPricesCache;\r\n  try {\r\n    const response = await fetch(\"/rovinieta-prices.json\");\r\n    rovinietaPricesCache = await response.json();\r\n    return rovinietaPricesCache;\r\n  } catch (error) {\r\n    console.error(\"Error fetching rovinieta prices:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\nconst countryCalculators = {\r\n  ROU: async (tollData, _duration, vehicleAxles) => {\r\n    const pricesData = await fetchRovinietaPrices();\r\n    // Try to use the specific axle count, but fall back to \"5\" if not available\r\n    const vehiclePrices = (pricesData && pricesData.ROU && pricesData.ROU[vehicleAxles]) \r\n      || pricesData?.ROU?.[\"5\"];\r\n    if (!vehiclePrices) {\r\n      console.warn(\"No pricing data for vehicle with\", vehicleAxles, \"axles, using default for ROU.\");\r\n      return { cost: 11.0 };\r\n    }\r\n    // Always use the 1-day toll cost\r\n    const ticketPrice = vehiclePrices[\"1\"];\r\n    return { cost: ticketPrice };\r\n  },\r\n  NLD: async (tollData, _duration, vehicleAxles) => {\r\n    const pricesData = await fetchRovinietaPrices();\r\n    const vehiclePrices = (pricesData && pricesData.NLD && pricesData.NLD[vehicleAxles])\r\n      || pricesData?.NLD?.[\"5\"];\r\n    if (!vehiclePrices) {\r\n      console.warn(\"No pricing data for vehicle with\", vehicleAxles, \"axles, using default for NLD.\");\r\n      return { cost: 12.0 };\r\n    }\r\n    const ticketPrice = vehiclePrices[\"1\"];\r\n    return { cost: ticketPrice };\r\n  },\r\n  LUX: async (tollData, _duration, vehicleAxles) => {\r\n    const pricesData = await fetchRovinietaPrices();\r\n    const vehiclePrices = (pricesData && pricesData.LUX && pricesData.LUX[vehicleAxles])\r\n      || pricesData?.LUX?.[\"5\"];\r\n    if (!vehiclePrices) {\r\n      console.warn(\"No pricing data for vehicle with\", vehicleAxles, \"axles, using default for LUX.\");\r\n      return { cost: 12.0 };\r\n    }\r\n    const ticketPrice = vehiclePrices[\"1\"];\r\n    return { cost: ticketPrice };\r\n  },\r\n  DEU: async (tollData) => {\r\n    const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n    return { cost };\r\n  },\r\n  HUN: async (tollData) => {\r\n    const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n    return { cost };\r\n  },\r\n  AUT: async (tollData) => {\r\n    const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n    return { cost };\r\n  },\r\n  FRA: async (tollData) => {\r\n    const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n    return { cost };\r\n  },\r\n  ITA: async (tollData) => {\r\n    const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n    return { cost };\r\n  },\r\n  SVN: async (tollData) => {\r\n    const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n    return { cost };\r\n  },\r\n  SVK: async (tollData) => {\r\n    const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n    return { cost };\r\n  },\r\n  PRT: async (tollData) => {\r\n    const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n    return { cost };\r\n  },\r\n  ESP: async (tollData) => {\r\n    const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n    return { cost };\r\n  },\r\n  BEL: async (tollData) => {\r\n    const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n    return { cost };\r\n  },\r\n  POL: async (tollData) => {\r\n    const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n    return { cost };\r\n  },\r\n  CZE: async (tollData) => {\r\n    const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n    return { cost };\r\n  },\r\n  CHE: async (tollData) => {\r\n    const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n    return { cost };\r\n  }\r\n};\r\n\r\nconst exchangeRates = async () => {\r\n  const response = await fetch(\"https://api.exchangerate-api.com/v4/latest/EUR\");\r\n  const data = await response.json();\r\n  return data.rates || {};\r\n};\r\n\r\nconst convertToEuro = async (amount, currency) => {\r\n  if (typeof amount !== \"number\") {\r\n    console.warn(\"Invalid amount for conversion:\", amount);\r\n    return 0;\r\n  }\r\n  const rates = await exchangeRates();\r\n  if (!rates[currency]) {\r\n    console.error(`Exchange rate for ${currency} is not available.`);\r\n    return amount;\r\n  }\r\n  return currency === \"EUR\" ? amount : amount / rates[currency];\r\n};\r\n\r\nconst detectCountriesFromRoute = (route) => {\r\n  const countries = new Set();\r\n  if (route.sections) {\r\n    route.sections.forEach((section) => {\r\n      if (section.tollSystems) {\r\n        section.tollSystems.forEach((system) => {\r\n          if (system.countryCode) {\r\n            countries.add(system.countryCode);\r\n          }\r\n        });\r\n      }\r\n      if (section.tolls) {\r\n        section.tolls.forEach((toll) => {\r\n          if (toll.countryCode) {\r\n            countries.add(toll.countryCode);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n  return Array.from(countries);\r\n};\r\n\r\nconst TollCalculator = ({\r\n  startCoordinates,\r\n  endCoordinates,\r\n  intermediatePoints = [],\r\n  vehicleType,\r\n  rawDuration,\r\n  rawDistance,\r\n  onTollUpdate,\r\n  selectedRoute, // Dacă este transmis, folosim această rută pentru calculul taxelor\r\n}) => {\r\n  const [tollDetails, setTollDetails] = useState({ totalCost: 0, tollList: [] });\r\n  // Folosim un useRef pentru a reține id-urile rutelor deja procesate\r\n  const processedRoutes = useRef(new Set());\r\n\r\n  // Funcția ta processTollData rămâne aceeași\r\n  const processTollData = async (route) => {\r\n    try {\r\n      // console.log(\"Processing toll data for route:\", route);\r\n      \r\n      // Folosim rawDuration (sau 1 dacă nu e valid)\r\n      const totalDuration = rawDuration && rawDuration > 0 ? rawDuration : 1;\r\n      \r\n      // Definim țările pentru care se aplică costuri de tip vignietă\r\n      const targetCountries = [\"LUX\", \"ROU\", \"NLD\"];\r\n      const countryDurations = {};\r\n      if (route.sections) {\r\n        route.sections.forEach((section) => {\r\n          if (section.tollSystems && section.tollSystems.length > 0 && section.summary) {\r\n            section.tollSystems.forEach((system) => {\r\n              const cc = system.countryCode;\r\n              if (targetCountries.includes(cc)) {\r\n                countryDurations[cc] = Math.max(countryDurations[cc] || 0, section.summary.duration);\r\n              }\r\n            });\r\n          }\r\n        });\r\n      }\r\n      \r\n      // Setăm numărul de zile pentru vigniete (în acest exemplu, 1 zi pe țară)\r\n      const countryDays = {};\r\n      targetCountries.forEach((cc) => {\r\n        countryDays[cc] = 1;\r\n      });\r\n      \r\n      let tollList = [];\r\n      \r\n      // Verificăm dacă există array-ul tolls în secțiuni\r\n      const hasTolls = route.sections && route.sections.some(\r\n        (section) => section.tolls && section.tolls.length > 0\r\n      );\r\n      \r\n      if (hasTolls) {\r\n        // Procesare din array-ul \"tolls\"\r\n        tollList = await processTollsFallback(route);\r\n      } else {\r\n        tollList = [];\r\n      }\r\n      \r\n      let totalCost = 0;\r\n      // Deduplicare: pentru țările din targetCountries, adăugăm costul o singură dată\r\n      const addedCountries = new Set();\r\n      tollList.forEach((toll) => {\r\n        if (targetCountries.includes(toll.country)) {\r\n          if (!addedCountries.has(toll.country)) {\r\n            totalCost += toll.cost;\r\n            addedCountries.add(toll.country);\r\n          }\r\n        } else {\r\n          totalCost += toll.cost;\r\n        }\r\n      });\r\n      \r\n      const hours = Math.floor(totalDuration / 3600);\r\n      const minutes = Math.floor((totalDuration % 3600) / 60);\r\n      const formattedDuration = `${hours}h ${minutes}m`;\r\n      \r\n      // console.log(\"Final toll list:\", tollList);\r\n      // console.log(\"Total toll cost:\", totalCost);\r\n      \r\n      const newTollDetails = {\r\n        totalCost,\r\n        tollList,\r\n        duration: formattedDuration,\r\n      };\r\n      setTollDetails(newTollDetails);\r\n      onTollUpdate(newTollDetails);\r\n    } catch (error) {\r\n      console.error(\"Error processing toll data:\", error);\r\n    }\r\n  };\r\n\r\n  // Fallback pentru procesarea taxelor din array-ul \"tolls\"\r\n  const processTollsFallback = async (route) => {\r\n    let tollMap = {};\r\n    if (!route.sections) return [];\r\n    \r\n    for (const section of route.sections) {\r\n      if (section.tolls && section.tolls.length > 0) {\r\n        for (const toll of section.tolls) {\r\n          const countryCode = toll.countryCode;\r\n          \r\n          // Dacă nu există tarife în toll.fares, folosim numele din toll.tollSystem (acum cu înlocuire)\r\n          if ((!toll.fares || toll.fares.length === 0) && countryCode && countryCalculators[countryCode]) {\r\n            const dummyFare = { \r\n              name: toll.tollSystem ? toll.tollSystem : `${countryCode}`,\r\n              price: { value: 0, currency: \"EUR\" }\r\n            };\r\n            const sectionMetric = (section.summary?.length || 0);\r\n            const result = await countryCalculators[countryCode](dummyFare, sectionMetric, vehicleType.axles);\r\n            const key = `${countryCode}-Default`;\r\n            \r\n            tollMap[key] = {\r\n              name: toll.tollSystem ? toll.tollSystem : `${countryCode}`,\r\n              country: countryCode,\r\n              cost: result.cost,\r\n              currency: \"EUR\",\r\n              tollCollectionLocations: toll.tollCollectionLocations || [],\r\n            };\r\n            continue;\r\n          }\r\n          \r\n          if (toll.fares && toll.fares.length > 0) {\r\n            for (const fare of toll.fares) {\r\n              if (countryCode && countryCalculators[countryCode]) {\r\n                const sectionMetric = ([\"DEU\", \"HUN\", \"AUT\", \"FRA\", \"ITA\", \"SVN\", \"PRT\", \"ESP\", \"BEL\", \"POL\", \"CZE\", \"SVK\", \"CHE\"].includes(countryCode))\r\n                  ? (section.summary?.length || 0)\r\n                  : rawDuration;\r\n                const result = await countryCalculators[countryCode](fare, sectionMetric, vehicleType.axles);\r\n                const key = `${countryCode}-${fare.name || \"Default\"}`;\r\n                if (tollMap[key]) {\r\n                  if ([\"ROU\", \"NLD\", \"LUX\"].includes(countryCode)) {\r\n                    // Nu facem adunare suplimentară pentru vigniete\r\n                    continue;\r\n                  } else {\r\n                    tollMap[key].cost += result.cost;\r\n                  }\r\n                } else {\r\n                  tollMap[key] = {\r\n                    name: fare.name || (toll.tollSystem ? toll.tollSystem : `${countryCode}`),\r\n                    country: countryCode,\r\n                    cost: result.cost,\r\n                    currency: \"EUR\",\r\n                    tollCollectionLocations: toll.tollCollectionLocations || [],\r\n                  };\r\n                }\r\n              } else if (fare.price && fare.price.value) {\r\n                const locKey = (toll.tollCollectionLocations && toll.tollCollectionLocations.length > 0)\r\n                  ? toll.tollCollectionLocations.map((loc) => loc.name).join(\"_\")\r\n                  : \"\";\r\n                const key = `${toll.countryCode || \"Unknown\"}-${fare.name || \"Default\"}-${locKey}`;\r\n                const costInEuro = await convertToEuro(fare.price.value, fare.price.currency || \"EUR\");\r\n                if (tollMap[key]) {\r\n                  tollMap[key].cost = Math.min(tollMap[key].cost, costInEuro);\r\n                } else {\r\n                  tollMap[key] = {\r\n                    name: fare.name || (toll.tollSystem ? toll.tollSystem : `${toll.countryCode || \"Unknown\"}`),\r\n                    country: toll.countryCode || \"Unknown\",\r\n                    cost: costInEuro,\r\n                    currency: \"EUR\",\r\n                    tollCollectionLocations: toll.tollCollectionLocations || [],\r\n                  };\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return Object.values(tollMap);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // console.log(\"TollCalculator - Dependencies updated\", {\r\n    //   rawDuration,\r\n    //   rawDistance,\r\n    //   hasSelectedRoute: !!selectedRoute,\r\n    //   hasStartCoords: !!startCoordinates,\r\n    //   hasEndCoords: !!endCoordinates,\r\n    //   vehicleAxles: vehicleType?.axles\r\n    // });\r\n\r\n    if (selectedRoute && selectedRoute.id) {\r\n      // Dacă ruta deja a fost procesată, nu o mai procesăm\r\n      if (processedRoutes.current.has(selectedRoute.id)) return;\r\n      processedRoutes.current.add(selectedRoute.id);\r\n      processTollData(selectedRoute);\r\n    } else if (startCoordinates && endCoordinates && rawDuration && rawDistance) {\r\n      const fetchTollData = async () => {\r\n        try {\r\n          let url = `https://router.hereapi.com/v8/routes?origin=${startCoordinates.lat},${startCoordinates.lng}`;\r\n          intermediatePoints.forEach((point) => {\r\n            url += `&via=${point.lat},${point.lng}`;\r\n          });\r\n          url += `&destination=${endCoordinates.lat},${endCoordinates.lng}`;\r\n          url += `&return=polyline,summary,actions,instructions,tolls`;\r\n          url += `&transportMode=truck`;\r\n          url += `&vehicle[height]=400`;\r\n          url += `&vehicle[width]=255`;\r\n          url += `&vehicle[length]=1600`;\r\n          url += `&truck[axleCount]=${vehicleType.axles}`;\r\n          url += `&vehicle[grossWeight]=${vehicleType.weight}`;\r\n          url += `&truck[limitedWeight]=7500`;\r\n          url += `&tolls[emissionType]=euro6`;\r\n          url += `&apikey=${process.env.REACT_APP_HERE_API_KEY}`;\r\n\r\n          const response = await fetch(url);\r\n          const data = await response.json();\r\n          if (!data.routes || data.routes.length === 0) {\r\n            console.error(\"No routes found\");\r\n            return;\r\n          }\r\n          processTollData(data.routes[0]);\r\n        } catch (error) {\r\n          console.error(\"Error fetching toll data:\", error);\r\n        }\r\n      };\r\n      fetchTollData();\r\n    }\r\n  }, [\r\n    startCoordinates,\r\n    endCoordinates,\r\n    intermediatePoints,\r\n    vehicleType,\r\n    rawDuration,\r\n    rawDistance,\r\n    selectedRoute?.id\r\n  ]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default TollCalculator;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n\r\n// // Caching pentru prețurile de rovinietă\r\n// let rovinietaPricesCache = null;\r\n\r\n// const fetchRovinietaPrices = async () => {\r\n//   if (rovinietaPricesCache) return rovinietaPricesCache;\r\n//   try {\r\n//     const response = await fetch(\"/rovinieta-prices.json\");\r\n//     rovinietaPricesCache = await response.json();\r\n//     return rovinietaPricesCache;\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching rovinieta prices:\", error);\r\n//     return null;\r\n//   }\r\n// };\r\n\r\n// const countryCalculators = {\r\n//   ROU: async (tollData, duration, vehicleAxles) => {\r\n//     const pricesData = await fetchRovinietaPrices();\r\n//     const vehiclePrices = pricesData && pricesData.ROU && pricesData.ROU[\"5\"];\r\n//     if (!vehiclePrices) {\r\n//       console.warn(\"No pricing data for vehicle with 5 axles.\");\r\n//       return { cost: 0, type: \"fixed\" };\r\n//     }\r\n//     const ticketPrice = vehiclePrices[\"1\"];\r\n//     return { cost: ticketPrice, type: \"fixed\" };\r\n//   },\r\n//   NLD: async (tollData, duration, vehicleAxles) => {\r\n//     const pricesData = await fetchRovinietaPrices();\r\n//     const vehiclePrices = pricesData && pricesData.NLD && pricesData.NLD[\"5\"];\r\n//     if (!vehiclePrices) {\r\n//       console.warn(\"No pricing data for vehicle with 5 axles.\");\r\n//       return { cost: 0, type: \"fixed\" };\r\n//     }\r\n//     const ticketPrice = vehiclePrices[\"1\"];\r\n//     return { cost: ticketPrice, type: \"fixed\" };\r\n//   },\r\n//   LUX: async (tollData, duration, vehicleAxles) => {\r\n//     const pricesData = await fetchRovinietaPrices();\r\n//     const vehiclePrices = pricesData && pricesData.LUX && pricesData.LUX[\"5\"];\r\n//     if (!vehiclePrices) {\r\n//       console.warn(\"No pricing data for vehicle with 5 axles.\");\r\n//       return { cost: 0, type: \"fixed\" };\r\n//     }\r\n//     const ticketPrice = vehiclePrices[\"1\"];\r\n//     return { cost: ticketPrice, type: \"fixed\" };\r\n//   },\r\n//   DEU: async (tollData) => {\r\n//     const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n//     return { cost, type: \"perKm\" };\r\n//   },\r\n//   HUN: async (tollData) => {\r\n//     const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n//     return { cost, type: \"perKm\" };\r\n//   },\r\n//   AUT: async (tollData) => {\r\n//     const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n//     return { cost, type: \"fixed\" };\r\n//   },\r\n//   FRA: async (tollData) => {\r\n//     const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n//     return { cost, type: \"fixed\" };\r\n//   },\r\n//   ITA: async (tollData) => {\r\n//     const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n//     return { cost, type: \"perKm\" };\r\n//   },\r\n//   SVN: async (tollData) => {\r\n//     const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n//     return { cost, type: \"perKm\" };\r\n//   },\r\n//   SVK: async (tollData) => {\r\n//     const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n//     return { cost, type: \"perKm\" };\r\n//   },\r\n//   PRT: async (tollData) => {\r\n//     const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n//     return { cost, type: \"perKm\" };\r\n//   },\r\n//   ESP: async (tollData) => {\r\n//     const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n//     return { cost, type: \"perKm\" };\r\n//   },\r\n//   BEL: async (tollData) => {\r\n//     const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n//     return { cost, type: \"perKm\" };\r\n//   },\r\n//   POL: async (tollData) => {\r\n//     const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n//     return { cost, type: \"perKm\" };\r\n//   },\r\n//   CZE: async (tollData) => {\r\n//     const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n//     return { cost, type: \"perKm\" };\r\n//   },\r\n//   CHE: async (tollData) => {\r\n//     const cost = await convertToEuro(tollData.price.value, tollData.price.currency);\r\n//     return { cost, type: \"perKm\" };\r\n//   }\r\n// };\r\n\r\n// const exchangeRates = async () => {\r\n//   const response = await fetch(\"https://api.exchangerate-api.com/v4/latest/EUR\");\r\n//   const data = await response.json();\r\n//   return data.rates || {};\r\n// };\r\n\r\n// const convertToEuro = async (amount, currency) => {\r\n//   const rates = await exchangeRates();\r\n//   if (!rates[currency]) {\r\n//     console.error(`Exchange rate for ${currency} is not available.`);\r\n//     return amount;\r\n//   }\r\n//   return currency === \"EUR\" ? amount : amount / rates[currency];\r\n// };\r\n\r\n// const TollCalculator = ({\r\n//   startCoordinates,\r\n//   endCoordinates,\r\n//   intermediatePoints = [],\r\n//   vehicleType,\r\n//   rawDuration,\r\n//   rawDistance,\r\n//   onTollUpdate,\r\n//   selectedRoute, // Dacă este transmis, folosim această rută pentru calculul taxelor\r\n// }) => {\r\n//   const [tollDetails, setTollDetails] = useState({ totalCost: 0, tollList: [] });\r\n\r\n//   // Funcție de procesare a datelor de taxare dintr-o rută\r\n//   const processTollData = async (route) => {\r\n//     try {\r\n//       // Folosim rawDuration, dacă este 0 setăm 1 pentru a evita diviziunea cu 0\r\n//       const totalDuration = rawDuration && rawDuration > 0 ? rawDuration : 1;\r\n//       const targetCountries = [\"LUX\", \"ROU\", \"NLD\"];\r\n//       const countryDurations = {};\r\n      \r\n//       // Calculăm durata maximă pentru țările cu vignietă\r\n//       route.sections.forEach((section) => {\r\n//         if (section.tollSystems && section.tollSystems.length > 0 && section.summary) {\r\n//           section.tollSystems.forEach((system) => {\r\n//             const cc = system.countryCode;\r\n//             if (targetCountries.includes(cc)) {\r\n//               countryDurations[cc] = Math.max(countryDurations[cc] || 0, section.summary.duration);\r\n//             }\r\n//           });\r\n//         }\r\n//       });\r\n\r\n//       // Setăm numărul de zile pentru vigniete (se poate adapta)\r\n//       const countryDays = {};\r\n//       targetCountries.forEach((cc) => {\r\n//         countryDays[cc] = 1;\r\n//       });\r\n      \r\n//       let tollList = [];\r\n\r\n//       // Dacă există date în tollSystems cu preț, le procesăm\r\n//       const hasTollSystems = route.sections.some(\r\n//         (section) => section.tollSystems && section.tollSystems.length > 0\r\n//       );\r\n      \r\n//       // Dacă tollSystems nu conțin prețuri utile, folosim fallback-ul prin tolls\r\n//       if (hasTollSystems) {\r\n//         let aggregatedSystems = {};\r\n//         for (const section of route.sections) {\r\n//           if (section.tollSystems && section.tollSystems.length > 0) {\r\n//             for (const system of section.tollSystems) {\r\n//               if (system.price && system.price.value !== undefined && system.price.currency) {\r\n//                 // Folosim calculatoarele specifice de țară\r\n//                 const countryCode = system.countryCode;\r\n//                 if (countryCode && countryCalculators[countryCode]) {\r\n//                   const durationForCountry = targetCountries.includes(countryCode)\r\n//                     ? (countryDurations[countryCode] || 1)\r\n//                     : totalDuration;\r\n//                   const result = await countryCalculators[countryCode](\r\n//                     system,\r\n//                     durationForCountry,\r\n//                     vehicleType.axles\r\n//                   );\r\n//                   if (countryCode === \"FRA\" && aggregatedSystems[countryCode]) {\r\n//                     aggregatedSystems[countryCode].cost = (aggregatedSystems[countryCode].cost + result.cost) / 2;\r\n//                   } else {\r\n//                     aggregatedSystems[countryCode] = {\r\n//                       operator: countryCode,\r\n//                       cost: result.cost,\r\n//                       type: result.type,\r\n//                       tollCollectionLocations: system.tollCollectionLocations || [],\r\n//                     };\r\n//                   }\r\n//                 } else {\r\n//                   const costInEuro = await convertToEuro(system.price.value, system.price.currency);\r\n//                   const key = system.tollSystem;\r\n//                   if (aggregatedSystems[key]) {\r\n//                     aggregatedSystems[key].cost = Math.max(aggregatedSystems[key].cost, costInEuro);\r\n//                   } else {\r\n//                     aggregatedSystems[key] = {\r\n//                       operator: key,\r\n//                       cost: costInEuro,\r\n//                       currency: system.price.currency,\r\n//                       tollCollectionLocations: system.tollCollectionLocations || [],\r\n//                     };\r\n//                   }\r\n//                 }\r\n//               } else {\r\n//                 console.warn(\"Missing price information in tollSystem:\", system);\r\n//               }\r\n//             }\r\n//           }\r\n//         }\r\n//         // Filtrăm doar operatorii pentru țările traversate\r\n//         const traversedCountries = new Set();\r\n//         route.sections.forEach((section) => {\r\n//           if (section.tollSystems) {\r\n//             section.tollSystems.forEach((system) => {\r\n//               if (system.countryCode) {\r\n//                 traversedCountries.add(system.countryCode);\r\n//               }\r\n//             });\r\n//           }\r\n//         });\r\n//         if (Object.keys(aggregatedSystems).length > 0) {\r\n//           tollList = Object.values(aggregatedSystems).filter((toll) =>\r\n//             traversedCountries.has(toll.operator)\r\n//           );\r\n//         }\r\n//       } else {\r\n//         // Folosim fallback-ul: procesăm direct array-ul \"tolls\"\r\n//         tollList = await processTollsFallback(route);\r\n//       }\r\n\r\n//       // Calculăm costul total pe baza tarifului din tollList\r\n//       let totalCost = 0;\r\n//       tollList.forEach((toll) => {\r\n//         // Dacă țara este una cu vignietă, se aplică costul per zi\r\n//         if (targetCountries.includes(toll.country)) {\r\n//           totalCost += toll.cost * (countryDays[toll.country] || 1);\r\n//         } else {\r\n//           totalCost += toll.cost;\r\n//         }\r\n//       });\r\n\r\n//       const hours = Math.floor(totalDuration / 3600);\r\n//       const minutes = Math.floor((totalDuration % 3600) / 60);\r\n//       const formattedDuration = `${hours}h ${minutes}m`;\r\n\r\n//       const newTollDetails = {\r\n//         totalCost,\r\n//         tollList,\r\n//         duration: formattedDuration,\r\n//       };\r\n//       setTollDetails(newTollDetails);\r\n//       onTollUpdate(newTollDetails);\r\n//     } catch (error) {\r\n//       console.error(\"Error processing toll data:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // Fallback pentru procesarea taxelor din array‑ul \"tolls\"\r\n//   const processTollsFallback = async (route) => {\r\n//     let tollMap = {};\r\n//     for (const section of route.sections) {\r\n//       if (section.tolls && section.tolls.length > 0) {\r\n//         // Parcurgem fiecare obiect toll din array\r\n//         for (const toll of section.tolls) {\r\n//           const countryCode = toll.countryCode;\r\n//           // Parcurgem fiecare tarif din array-ul fares\r\n//           if (toll.fares && toll.fares.length > 0) {\r\n//             for (const fare of toll.fares) {\r\n//               // Dacă există un calculator specific pentru țară, îl folosim\r\n//               if (countryCode && countryCalculators[countryCode]) {\r\n//                 const sectionMetric =\r\n//                   ([\"DEU\", \"HUN\", \"AUT\", \"FRA\", \"ITA\", \"SVN\", \"PRT\", \"ESP\", \"BEL\", \"POL\", \"CZE\", \"SVK\", \"CHE\"].includes(countryCode))\r\n//                     ? (section.summary?.length || 0)\r\n//                     : rawDuration;\r\n//                 const result = await countryCalculators[countryCode](fare, sectionMetric);\r\n//                 const key = `${countryCode}-${fare.name}`;\r\n//                 if (tollMap[key]) {\r\n//                   // Pentru anumite țări, cum ar fi VIGNETTE, putem lua minimul\r\n//                   if ([\"ROU\", \"NLD\", \"LUX\"].includes(countryCode)) {\r\n//                     tollMap[key].cost = Math.min(tollMap[key].cost, result.cost);\r\n//                   } else {\r\n//                     tollMap[key].cost += result.cost;\r\n//                   }\r\n//                 } else {\r\n//                   tollMap[key] = {\r\n//                     name: fare.name,\r\n//                     country: countryCode,\r\n//                     cost: result.cost,\r\n//                     type: result.type,\r\n//                     tollCollectionLocations: toll.tollCollectionLocations || [],\r\n//                   };\r\n//                 }\r\n//               } else {\r\n//                 // Dacă nu avem un calculator pentru țară, încercăm să folosim direct prețul din fare\r\n//                 const locKey = (toll.tollCollectionLocations && toll.tollCollectionLocations.length > 0)\r\n//                   ? toll.tollCollectionLocations.map((loc) => loc.name).join(\"_\")\r\n//                   : \"\";\r\n//                 const key = `${toll.countryCode}-${fare.name}-${locKey}`;\r\n//                 const costInEuro = await convertToEuro(fare.price.value, fare.price.currency);\r\n//                 if (tollMap[key]) {\r\n//                   tollMap[key].cost = Math.min(tollMap[key].cost, costInEuro);\r\n//                 } else {\r\n//                   tollMap[key] = {\r\n//                     name: fare.name,\r\n//                     country: toll.countryCode,\r\n//                     cost: costInEuro,\r\n//                     currency: fare.price.currency,\r\n//                     tollCollectionLocations: toll.tollCollectionLocations || [],\r\n//                   };\r\n//                 }\r\n//               }\r\n//             }\r\n//           }\r\n//         }\r\n//       }\r\n//     }\r\n//     return Object.values(tollMap);\r\n//   };\r\n\r\n//   // Efectul se declanșează atunci când sunt disponibile rawDuration și rawDistance \r\n//   // și când se schimbă selectedRoute sau alte dependențe.\r\n//   useEffect(() => {\r\n//     if (!rawDuration || !rawDistance) return;\r\n//     // Pentru debug, poți activa log-ul de mai jos:\r\n//     // console.log(\"TollCalculator - selectedRoute:\", selectedRoute);\r\n//     if (selectedRoute) {\r\n//       processTollData(selectedRoute);\r\n//     } else if (startCoordinates && endCoordinates) {\r\n//       const fetchTollData = async () => {\r\n//         try {\r\n//           let url = `https://router.hereapi.com/v8/routes?origin=${startCoordinates.lat},${startCoordinates.lng}`;\r\n//           intermediatePoints.forEach((point) => {\r\n//             url += `&via=${point.lat},${point.lng}`;\r\n//           });\r\n//           url += `&destination=${endCoordinates.lat},${endCoordinates.lng}`;\r\n//           url += `&return=polyline,summary,actions,instructions,tolls`;\r\n//           url += `&transportMode=truck`;\r\n//           url += `&vehicle[height]=400`;\r\n//           url += `&vehicle[width]=255`;\r\n//           url += `&vehicle[length]=1600`;\r\n//           url += `&truck[axleCount]=${vehicleType.axles}`;\r\n//           url += `&vehicle[grossWeight]=${vehicleType.weight}`;\r\n//           url += `&tolls[emissionType]=euro6`;\r\n//           url += `&apikey=NtdXMcSjbr4h__U2wEhaC7i-4wTlX71ofanOwpm5E3s`;\r\n\r\n//           const response = await fetch(url);\r\n//           const data = await response.json();\r\n//           if (!data.routes || data.routes.length === 0) {\r\n//             console.error(\"No routes found\");\r\n//             return;\r\n//           }\r\n//           processTollData(data.routes[0]);\r\n//         } catch (error) {\r\n//           console.error(\"Error fetching toll data:\", error);\r\n//         }\r\n//       };\r\n//       fetchTollData();\r\n//     }\r\n//   }, [startCoordinates, endCoordinates, intermediatePoints, vehicleType, rawDuration, rawDistance, selectedRoute]);\r\n\r\n//   return null;\r\n// };\r\n\r\n\r\n// export default TollCalculator;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport 'leaflet/dist/leaflet.css';\r\nimport AutoCompleteInput from \"./AutoCompleteInput\";\r\nimport TollCalculator from \"./TollCalculator\";\r\nimport \"./App.css\";\r\n\r\nconst MainPage = ({ user })  => {\r\n  const [activeTab, setActiveTab] = useState(\"input\"); // \"input\" | \"results\"\r\n  const [addresses, setAddresses] = useState([]);\r\n  const [distance, setDistance] = useState(null);\r\n  const [routes, setRoutes] = useState([]); // Array cu rutele alternative\r\n  const [selectedRouteIndex, setSelectedRouteIndex] = useState(null);\r\n  const [vehicleType, setVehicleType] = useState({\r\n    axles: 5,\r\n    weight: 40000,\r\n    EuroPerKm: 0.1, // exemplu\r\n  });\r\n  const [routeTaxCosts, setRouteTaxCosts] = useState([]);\r\n  const [tollCosts, setTollCosts] = useState([]);\r\n  const [duration, setDuration] = useState(null);\r\n  const [rawDistance, setRawDistance] = useState(null);\r\n  const [rawDuration, setRawDuration] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const mapRef = useRef(null);\r\n  const circleRef = useRef(null);\r\n  const markerGroupRef = useRef(null);\r\n  let apiCallCount = 0;\r\n\r\n  //de aici am butonul de salvare rute\r\n  const [plate, setPlate] = useState('');          // selected truck plate\r\n  const [identifier, setIdentifier] = useState(''); // unique run ID\r\n  const [saveMsg, setSaveMsg] = useState('');\r\n\r\n  const token = localStorage.getItem('token');\r\n  const handleSaveRoute = async () => {\r\n    if (addresses.length < 2) {\r\n      alert('Need at least start and end addresses');\r\n      return;\r\n    }\r\n    if (!plate) {\r\n      alert('Select a truck plate');\r\n      return;\r\n    }\r\n    if (!identifier) {\r\n      alert('Enter a unique run identifier');\r\n      return;\r\n    }\r\n\r\n    // build the payload\r\n    const routeData = {\r\n      date: new Date().toISOString(),\r\n      identifier,\r\n      addresses,\r\n      euroPerKm: vehicleType.EuroPerKm,\r\n      distance,                       // in km\r\n      costPerKm: costPerKmForSelected(),\r\n      tolls: tollCosts[selectedRouteIndex].tollList,\r\n      tollCost: tollCosts[selectedRouteIndex].totalCost,\r\n      totalCost: costPerKmForSelected() + tollCosts[selectedRouteIndex].totalCost,\r\n      duration\r\n    };\r\n\r\n    try {\r\n      const res = await fetch('http://localhost:4000/api/trucks', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify({ plate, routeData })\r\n      });\r\n      if (!res.ok) throw new Error((await res.json()).message || res.statusText);\r\n      const saved = await res.json();\r\n      setSaveMsg('Route saved ✔️');\r\n    } catch (err) {\r\n      setSaveMsg('Save failed: ' + err.message);\r\n    }\r\n  };\r\n\r\n  // Helper pentru calcule\r\n  const computeRouteMetrics = (route) => {\r\n    let totalDistance = 0, totalDuration = 0;\r\n    route.sections.forEach((section) => {\r\n      if (section.summary) {\r\n        totalDistance += section.summary.length;\r\n        totalDuration += section.summary.duration;\r\n      }\r\n    });\r\n    const km = totalDistance / 1000;\r\n    const costPerKm = km * vehicleType.EuroPerKm;\r\n    return { totalDistance, totalDuration, km, costPerKm };\r\n  };\r\n\r\n  // Adaugă adrese\r\n  const addAddress = (coordsWithLabel) => {\r\n    setAddresses((prev) => [...prev, coordsWithLabel]);\r\n  };\r\n  const moveUp = (index) => {\r\n    if (index === 0) return;\r\n    const newArr = [...addresses];\r\n    [newArr[index - 1], newArr[index]] = [newArr[index], newArr[index - 1]];\r\n    setAddresses(newArr);\r\n  };\r\n  const moveDown = (index) => {\r\n    if (index === addresses.length - 1) return;\r\n    const newArr = [...addresses];\r\n    [newArr[index], newArr[index + 1]] = [newArr[index + 1], newArr[index]];\r\n    setAddresses(newArr);\r\n  };\r\n  const removeAddress = (index) => {\r\n    const newArr = [...addresses];\r\n    newArr.splice(index, 1);\r\n    setAddresses(newArr);\r\n  };\r\n\r\n  // Obținere rute\r\n  const getRoute = async () => {\r\n    console.log(`getRoute API call #${apiCallCount}`);\r\n\r\n    // if (addresses.length < 2) {\r\n    //   alert(\"Please enter at least two addresses!\");\r\n    //   return;\r\n    // }\r\n    \r\n    setIsLoading(true);\r\n    \r\n    const startCoordinates = addresses[0];\r\n    const endCoordinates = addresses[addresses.length - 1];\r\n    const intermediatePoints = addresses.slice(1, addresses.length - 1);\r\n    try {\r\n      let url = `https://router.hereapi.com/v8/routes?origin=${startCoordinates.lat},${startCoordinates.lng}`;\r\n      intermediatePoints.forEach((point) => {\r\n        const viaParam = point.radius ? \r\n          `${point.lat},${point.lng};r=${point.radius}` : \r\n          `${point.lat},${point.lng}`;\r\n        url += `&via=${point.lat},${point.lng}`;\r\n      });\r\n      url += `&destination=${endCoordinates.lat},${endCoordinates.lng}`;\r\n      url += `&return=polyline,summary,actions,instructions,tolls`;\r\n      url += `&alternatives=3`; // max 3 rute alternative  \r\n      url += `&vehicle[weightPerAxle]=11500`;\r\n      url += `&transportMode=truck`;\r\n      url += `&vehicle[height]=400`;\r\n      url += `&vehicle[width]=255`;\r\n      url += `&vehicle[length]=1875`;\r\n      url += `&truck[axleCount]=${vehicleType.axles}`;\r\n      url += `&vehicle[grossWeight]=${vehicleType.weight}`;\r\n      url += `&truck[limitedWeight]=7500`;\r\n      url += `&tolls[emissionType]=euro6`;\r\n      url += `&apikey=${process.env.REACT_APP_HERE_API_KEY}`;\r\n\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      console.log(\"Raspuns API: \", data);\r\n\r\n      if (!data.routes || data.routes.length === 0) {\r\n        console.error(\"No routes found:\", data);\r\n        alert(\"No routes found for the selected addresses. Try other locations.\");\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      setRoutes(data.routes);\r\n      \r\n      // Initialize costs for each route\r\n      const initialCosts = Array.from({ length: data.routes.length }, () => 0);\r\n      setRouteTaxCosts(initialCosts);\r\n\r\n      // Initialize tollCosts for storing tollList\r\n      const initialTollLists = Array.from({ length: data.routes.length }, () => ({\r\n        totalCost: 0,\r\n        tollList: []\r\n      }));\r\n      setTollCosts(initialTollLists);\r\n\r\n      setSelectedRouteIndex(0);\r\n      displayRoute(data.routes[0]);\r\n\r\n      if (data.routes[0].sections && data.routes[0].sections.length > 0) {\r\n        let totalDistance = 0;\r\n        let totalDuration = 0;\r\n        data.routes[0].sections.forEach((section) => {\r\n          if (section.summary) {\r\n            totalDistance += section.summary.length;\r\n            totalDuration += section.summary.duration;\r\n          }\r\n        });\r\n        setDistance((totalDistance / 1000).toFixed(2));\r\n        setRawDistance(totalDistance);\r\n        setRawDuration(totalDuration);\r\n        const hours = Math.floor(totalDuration / 3600);\r\n        const minutes = Math.floor((totalDuration % 3600) / 60);\r\n        setDuration(`${hours}h ${minutes}m`);\r\n      }\r\n      setActiveTab(\"results\");\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Error fetching route:\", error);\r\n      alert(\"An error occurred while calculating the route. Please try again.\");\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Afișare rută pe hartă\r\n  const displayRoute = (route) => {\r\n    if (!mapRef.current) return;\r\n    //mapRef.current.getObjects().forEach((obj) => mapRef.current.removeObject(obj));\r\n    mapRef.current.getObjects().forEach((obj) => {\r\n      if (obj instanceof window.H.map.Polyline) {\r\n        mapRef.current.removeObject(obj);\r\n      }\r\n    });\r\n    route.sections.forEach((section) => {\r\n      const lineString = window.H.geo.LineString.fromFlexiblePolyline(section.polyline);\r\n      const routeLine = new window.H.map.Polyline(lineString, {\r\n        style: { strokeColor: \"blue\", lineWidth: 4 },\r\n      });\r\n      mapRef.current.addObject(routeLine);\r\n      const boundingBox = routeLine.getBoundingBox();\r\n      if (boundingBox) {\r\n        mapRef.current.getViewModel().setLookAtData({ bounds: boundingBox });\r\n      }\r\n    });\r\n  };\r\n\r\n  // Selectare rută\r\n  const handleRouteSelect = (index) => {\r\n    setSelectedRouteIndex(index);\r\n    displayRoute(routes[index]);\r\n    if (routes[index].sections && routes[index].sections.length > 0) {\r\n      let totalDistance = 0;\r\n      let totalDuration = 0;\r\n      routes[index].sections.forEach((section) => {\r\n        if (section.summary) {\r\n          totalDistance += section.summary.length;\r\n          totalDuration += section.summary.duration;\r\n        }\r\n      });\r\n      setDistance((totalDistance / 1000).toFixed(2));\r\n      setRawDistance(totalDistance);\r\n      setRawDuration(totalDuration);\r\n      const hours = Math.floor(totalDuration / 3600);\r\n      const minutes = Math.floor((totalDuration % 3600) / 60);\r\n      setDuration(`${hours}h ${minutes}m`);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (addresses.length < 2) {\r\n      alert('Trebuie să adaugi minimum două adrese înainte de calcul.');\r\n      return;\r\n    }\r\n    apiCallCount++;\r\n    await getRoute();\r\n  };\r\n\r\n  // 3) Callback - când TollCalculator calculează costul pt o rută, îl salvăm și într-un array numeric simplu routeTaxCosts, și în tollCosts (pt listă).\r\n  const updateTollCostForRoute = (index, tollData) => {\r\n\r\n    // actualizăm array-ul numeric\r\n    setRouteTaxCosts((prev) => {\r\n      const newArr = [...prev];\r\n      newArr[index] = tollData.totalCost || 0;\r\n      return newArr;\r\n    });\r\n\r\n    // actualizăm array-ul complet\r\n    setTollCosts((prev) => {\r\n      const newArr = [...prev];\r\n      newArr[index] = tollData; // { totalCost, tollList, duration }\r\n      return newArr;\r\n    });\r\n  };\r\n\r\n  // 0) Funcţia de reverse‑geocoding HERE\r\n  const reverseGeocode = async (lat, lng) => {\r\n    const apiKey = process.env.REACT_APP_HERE_API_KEY;  // înlocuieşte cu cheia ta\r\n    const revUrl = `https://revgeocode.search.hereapi.com/v1/revgeocode` +\r\n                  `?at=${lat},${lng}` +\r\n                  `&lang=en-US` +\r\n                  `&limit=1` +\r\n                  `&apikey=${apiKey}`;\r\n    try {\r\n      const response = await fetch(revUrl);\r\n      const data = await response.json();\r\n      if (data.items && data.items.length > 0) {\r\n        const item = data.items[0];\r\n        return {\r\n          lat:  item.position.lat,\r\n          lng:  item.position.lng,\r\n          label: item.address.label || item.title || \"Via Station\",\r\n          isVia: true,\r\n          radius: 10000\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Reverse geocode error:\", error);\r\n    }\r\n    return null;\r\n  };\r\n\r\n\r\n  // 1) Funcție utilitară: deplasare de X kilometri pe latitudine/longitudine\r\n  function offsetLatLng({ lat, lng }, distanceKm, angleRad) {\r\n    const R = 6371; // raza Pământului în km\r\n    const δ = distanceKm / R; \r\n    const θ = angleRad;\r\n    const φ1 = lat * Math.PI / 180;\r\n    const λ1 = lng * Math.PI / 180;\r\n    const φ2 = Math.asin(\r\n      Math.sin(φ1) * Math.cos(δ) +\r\n      Math.cos(φ1) * Math.sin(δ) * Math.cos(θ)\r\n    );\r\n    const λ2 = λ1 + Math.atan2(\r\n      Math.sin(θ) * Math.sin(δ) * Math.cos(φ1),\r\n      Math.cos(δ) - Math.sin(φ1) * Math.sin(φ2)\r\n    );\r\n    return { lat: φ2 * 180/Math.PI, lng: λ2 * 180/Math.PI };\r\n  }\r\n\r\n  // 2) În interiorul App() — înainte de useEffect\r\n  const findBestViaInCircle = async (center, radiusKm) => {\r\n    if (!addresses.length) return null;\r\n    const start = addresses[0], end = addresses[addresses.length-1];\r\n    let best = null;\r\n    let bestCost = Infinity;\r\n\r\n    // Generăm 12 candidați la fiecare 30°\r\n    const steps = 12;\r\n    for (let i = 0; i < steps; i++) {\r\n      const angle = (2 * Math.PI / steps) * i;\r\n      const via = offsetLatLng(center, radiusKm, angle);\r\n\r\n      // Construim URL‐ul HERE cu acest via\r\n      const url = new URL(\"https://router.hereapi.com/v8/routes\");\r\n      url.searchParams.set(\"origin\", `${start.lat},${start.lng}`);\r\n      url.searchParams.set(\"via\", `${via.lat},${via.lng}`);\r\n      url.searchParams.set(\"destination\", `${end.lat},${end.lng}`);\r\n      url.searchParams.set(\"transportMode\", \"truck\");\r\n      url.searchParams.set(\"return\", \"summary\");\r\n      url.searchParams.set(\"routingMode\", \"fast\");\r\n      url.searchParams.set(\"vehicle[height]\", \"400\");\r\n      url.searchParams.set(\"vehicle[weightPerAxle]\", \"11500\");\r\n      url.searchParams.set(\"vehicle[width]\", \"255\");\r\n      url.searchParams.set(\"truck[axleCount]\", `${vehicleType.axles}`);\r\n      url.searchParams.set(\"vehicle[grossWeight]\", `${vehicleType.weight}`);\r\n      url.searchParams.set(\"vehicle[length]\", \"1875\");\r\n      url.searchParams.set(\"apikey\", `${process.env.REACT_APP_HERE_API_KEY}`);\r\n      \r\n\r\n\r\n      try {\r\n        const res = await fetch(url);\r\n        const json = await res.json();\r\n        if (json.routes?.[0]?.sections) {\r\n          // Suma distanțelor din summary\r\n          const dist = json.routes[0].sections.reduce((sum, s) => sum + (s.summary?.length||0), 0);\r\n          if (dist < bestCost) {\r\n            bestCost = dist;\r\n            best = { via, cost: dist };\r\n          }\r\n        }\r\n      } catch (e) {\r\n        console.warn(\"HERE request failed for candidate\", via, e);\r\n      }\r\n    }\r\n    return best;\r\n  };\r\n\r\n  // 3) În useEffect pentru click dreapta\r\n  useEffect(() => {\r\n    if (!mapRef.current) return;\r\n    const map = mapRef.current;\r\n\r\n    const onRightClick = async (evt) => {\r\n      evt.preventDefault();\r\n      const pointer = evt.currentPointer || evt.pointer || evt;\r\n      const coord = map.screenToGeo(pointer.viewportX, pointer.viewportY);\r\n      console.log(\"Centru cerc:\", coord);\r\n\r\n      // Desenăm cercul\r\n      if (circleRef.current && map.getObjects().includes(circleRef.current)) map.removeObject(circleRef.current); circleRef.current = null;\r\n\r\n      const circle = new window.H.map.Circle(coord, 10000, {\r\n        style: { fillColor: \"rgba(0,0,255,0.3)\", strokeColor: \"blue\" }\r\n      });\r\n      map.addObject(circle);\r\n      circleRef.current = circle;\r\n\r\n      // Calculăm cel mai bun via\r\n      const best = await findBestViaInCircle(coord, 10 /*km*/);\r\n      if (best) {\r\n\r\n        const viaStation = {\r\n          lat: best.via.lat,\r\n          lng: best.via.lng,\r\n          label: `Lat: ${best.via.lat.toFixed(4)}, Lng: ${best.via.lng.toFixed(4)}`,\r\n          isVia: true,\r\n          radius: 10000\r\n        };\r\n\r\n        // obține numele locației prin reverse geocode\r\n        const locationInfo = await reverseGeocode(best.via.lat, best.via.lng);\r\n        //const label = `Lat: ${item.position.lat}, Lng: ${item.position.lng}`;\r\n        const label = locationInfo?.label || \"Via zone\";\r\n\r\n        // Înlocuim lista de adrese cu noul via\r\n        setAddresses(prev => [\r\n          prev[0],\r\n          viaStation,\r\n          prev[prev.length-1]\r\n        ]);\r\n        // Recalculăm ruta\r\n        apiCallCount++;\r\n        await getRoute();\r\n      } else {\r\n        alert(\"Nu am găsit niciun drum în zona selectată.\");\r\n      }\r\n\r\n      // Curățare cerc după 2s\r\n      setTimeout(() => {\r\n        if (circleRef.current && map.getObjects().includes(circleRef.current)) {\r\n          map.removeObject(circleRef.current);\r\n          circleRef.current = null;\r\n      }\r\n      }, 2000);\r\n    };\r\n\r\n    map.addEventListener(\"contextmenu\", onRightClick);\r\n    return () => map.removeEventListener(\"contextmenu\", onRightClick);\r\n  }, [addresses, routes, selectedRouteIndex]); // Adaugă dependințele necesare\r\n    \r\n  \r\n  useEffect(() => {\r\n    if (mapRef.current) return; \r\n  \r\n    const platform = new window.H.service.Platform({\r\n      apikey: process.env.REACT_APP_HERE_API_KEY,\r\n    });\r\n    const defaultLayers = platform.createDefaultLayers();\r\n    const map = new window.H.Map(\r\n      document.getElementById(\"mapContainer\"),\r\n      defaultLayers.vector.normal.map,\r\n      { zoom: 6, center: { lat: 44.4268, lng: 26.1025 } }\r\n    );\r\n    \r\n    // Important: initialize behavior & UI\r\n    const behavior = new window.H.mapevents.Behavior(new window.H.mapevents.MapEvents(map));\r\n    const ui = window.H.ui.UI.createDefault(map, defaultLayers);\r\n  \r\n    // Important: asigurăm vector base layer activ\r\n    const mapSettings = ui.getControl('mapsettings');\r\n  \r\n    mapRef.current = map;\r\n    \r\n    setTimeout(() => {\r\n      map.getViewPort().resize();\r\n    }, 0);\r\n  \r\n    window.addEventListener(\"resize\", () => map.getViewPort().resize());\r\n    return () => {\r\n      window.removeEventListener(\"resize\", () => map.getViewPort().resize());\r\n    };\r\n  }, [tollCosts, selectedRouteIndex]);\r\n  \r\n\r\n  // cost per km pt ruta selectată\r\n  const costPerKmForSelected = () => {\r\n    if (selectedRouteIndex === null || routes.length === 0) return 0;\r\n    const { costPerKm } = computeRouteMetrics(routes[selectedRouteIndex]);\r\n    return costPerKm;\r\n  };\r\n\r\n  // Zoom-scaler pentru marker-ele DOM\r\n  useEffect(() => {\r\n    if (!mapRef.current) return;\r\n    const map = mapRef.current;\r\n\r\n    const onMapViewChange = () => {\r\n      const zoom = map.getZoom();\r\n      if (markerGroupRef.current) {\r\n        markerGroupRef.current.getObjects().forEach(marker => {\r\n          const el = marker.__domElement;\r\n          if (el) {\r\n            const scale = 0.5 + zoom * 0.1;\r\n            el.style.transform = `translate(-50%,-110%) scale(${scale})`;\r\n          }\r\n        });\r\n      }\r\n    };\r\n    \r\n\r\n    map.addEventListener('mapviewchange', onMapViewChange);\r\n\r\n    return () => {\r\n      map.removeEventListener('mapviewchange', onMapViewChange);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!mapRef.current) return;\r\n    if (addresses.length === 0) return;\r\n  \r\n    if (markerGroupRef.current) {\r\n      mapRef.current.removeObject(markerGroupRef.current);\r\n    }\r\n  \r\n    const group = new window.H.map.Group();\r\n  \r\n    addresses.forEach((pt, idx) => {\r\n      const el = document.createElement('div');\r\n      el.className = 'numbered-marker';\r\n      el.style.transform = 'translate(-50%,-110%)';\r\n      \r\n      let color = \"blue\";\r\n      if (idx === 0) color = \"green\";\r\n      else if (idx === addresses.length - 1) color = \"red\";\r\n    \r\n      el.innerHTML = \r\n      `<svg viewBox=\"0 0 24 24\" class=\"arrow-icon\">\r\n        <path d=\"M12 2 L15 8 H9 L12 2 Z\" fill=\"${ idx===0 ? 'green' : idx===addresses.length-1 ? 'red' : 'blue' }\" />\r\n      </svg>\r\n      <span class=\"marker-label\">${idx+1}</span>\r\n      `;\r\n    \r\n      // Fix: asigurăm că dimensiunea DOM-ului e gata\r\n      document.body.appendChild(el);\r\n      const { offsetWidth, offsetHeight } = el;\r\n      document.body.removeChild(el);\r\n\r\n      el.style.marginLeft = `-${offsetWidth/2}px`;   // center horizontally\r\n      el.style.marginTop  = `0px`;                   // pin the TOP edge at the geo point\r\n\r\n    \r\n      console.log(\"el: \", el);\r\n      console.log(\"offW: \", offsetWidth);\r\n      console.log(\"offH: \", offsetHeight);\r\n\r\n      const domIcon = new window.H.map.DomIcon(el);\r\n    \r\n      const marker = new window.H.map.DomMarker(\r\n        { lat: pt.lat, lng: pt.lng },\r\n        { icon: domIcon, volatility: true }\r\n      );\r\n\r\n      marker.__domElement = el;\r\n    \r\n      //const simpleMarker = new window.H.map.Marker({lat: pt.lat, lng: pt.lng});\r\n      //mapRef.current.addObject(simpleMarker);\r\n\r\n      group.addObject(marker);\r\n    });\r\n    \r\n  \r\n    mapRef.current.addObject(group);\r\n    markerGroupRef.current = group;\r\n  }, [addresses, mapRef.current]);\r\n  \r\n  \r\n\r\n\r\n  return (\r\n    <div className=\"App flex flex-col h-screen\">\r\n      {/* HEADER */}\r\n      <header className=\"bg-white shadow-sm p-4 flex items-center justify-between\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 text-blue-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 2l.01 6L7 8c0 1.333 4 2 4 2s4-.667 4-2l-2-.01V2H9zM3 13h7v7H5.5a2.5 2.5 0 01-2.5-2.5V13zM21 13h-7v7h4.5a2.5 2.5 0 002.5-2.5V13z\" />\r\n          </svg>\r\n          <h1 className=\"text-xl font-bold text-gray-800\">Rossik Route Calculation</h1>\r\n        </div>\r\n      </header>\r\n\r\n      {/* MAIN CONTENT */}\r\n      <div className=\"flex flex-row flex-1 overflow-hidden\">\r\n        {/* LEFT SIDE */}\r\n        <div className=\"w-1/2 p-4 overflow-auto space-y-4\">\r\n          {/* ROW 1: Address + Vehicle */}\r\n          <div className=\"flex space-x-4\">\r\n            <div className=\"w-1/2 bg-white p-4 rounded shadow-sm\">\r\n              <h2 className=\"text-lg font-semibold mb-2\">Address</h2>\r\n              <form onSubmit={handleSubmit} className=\"flex flex-col gap-3\">\r\n                <div>\r\n                  <label className=\"block mb-1 font-medium text-sm text-gray-700\">Enter the address:</label>\r\n                  <AutoCompleteInput\r\n                    apiKey={process.env.REACT_APP_HERE_API_KEY}\r\n                    onSelect={addAddress}\r\n                  />\r\n                </div>\r\n                {addresses.length === 0 && <p className=\"text-sm text-gray-500\">No address entered.</p>}\r\n                <ul className=\"border rounded p-2 max-h-40 overflow-y-auto space-y-1\">\r\n                  {addresses.map((point, index) => (\r\n                    <li key={index} className=\"flex justify-between items-center\">\r\n                      <div className=\"text-sm text-gray-800\">\r\n                        {point.isVia ? <em>{point.label}</em> : (point.label || `Lat: ${point.lat}, Lng: ${point.lng}`)}\r\n                      </div>\r\n                      <div className=\"flex gap-2\">\r\n                        <button type=\"button\" onClick={() => moveUp(index)} className=\"text-xs text-blue-600 hover:underline\">Up</button>\r\n                        <button type=\"button\" onClick={() => moveDown(index)} className=\"text-xs text-blue-600 hover:underline\">Down</button>\r\n                        <button type=\"button\" onClick={() => removeAddress(index)} className=\"text-xs text-red-600 hover:underline\">X</button>\r\n                      </div>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n                <button\r\n                  type=\"submit\"\r\n                  disabled={isLoading}\r\n                  className={`mt-3 ${isLoading ? \"bg-gray-400\" : \"bg-blue-600 hover:bg-blue-700\"} text-white py-2 px-4 rounded font-semibold text-sm transition-colors`}\r\n                >\r\n                  {isLoading ? \"Calculare...\" : \"Calculate route\"}\r\n                </button>\r\n              </form>\r\n            </div>\r\n            <div className=\"w-1/2 bg-white p-4 rounded shadow-sm\">\r\n              <h2 className=\"text-lg font-semibold mb-2\">Vehicle Parameters</h2>\r\n              <div className=\"grid grid-cols-1 gap-2\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium mb-1\">Number of axles</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"axles\"\r\n                    value={vehicleType.axles}\r\n                    onChange={(e) => {\r\n                      const value = parseFloat(e.target.value);\r\n                      setVehicleType((prev) => ({ ...prev, axles: isNaN(value) ? prev.axles : value }));\r\n                    }}\r\n                    min=\"2\"\r\n                    max=\"10\"\r\n                    className=\"border rounded w-full p-1 text-sm\"\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label className=\"block text-sm font-medium mb-1\">Tonnage (kg)</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"weight\"\r\n                    value={vehicleType.weight}\r\n                    onChange={(e) => {\r\n                      const value = parseFloat(e.target.value);\r\n                      setVehicleType((prev) => ({ ...prev, weight: isNaN(value) ? prev.weight : value }));\r\n                    }}\r\n                    min=\"1000\"\r\n                    max=\"60000\"\r\n                    className=\"border rounded w-full p-1 text-sm\"\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label className=\"block text-sm font-medium mb-1\">Euro/km</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    inputMode=\"decimal\"\r\n                    step=\"0.01\"\r\n                    name=\"EuroPerKm\"\r\n                    value={vehicleType.EuroPerKm}\r\n                    onChange={(e) => {\r\n                      const raw = e.target.value.trim().replace(\",\", \".\");\r\n                      const parsed = parseFloat(raw);\r\n                      setVehicleType((prev) => ({ ...prev, EuroPerKm: isNaN(parsed) ? prev.EuroPerKm : parsed }));\r\n                    }}\r\n                    min=\"0\"\r\n                    max=\"10\"\r\n                    className=\"border rounded w-full p-1 text-sm\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* ROW 2: Alternative Routes */}\r\n          {routes.length > 0 && (\r\n            <div className=\"w-full bg-white p-4 rounded shadow-sm\">\r\n              <h2 className=\"text-md font-semibold mb-2\">Alternative Routes</h2>\r\n              <table className=\"min-w-full text-sm border border-gray-200\">\r\n                <thead>\r\n                  <tr className=\"bg-gray-50\">\r\n                    <th className=\"px-3 py-2 border\">Route</th>\r\n                    <th className=\"px-3 py-2 border\">Distance (km)</th>\r\n                    <th className=\"px-3 py-2 border\">Time</th>\r\n                    <th className=\"px-3 py-2 border\">Price per Km (EUR)</th>\r\n                    <th className=\"px-3 py-2 border\">Tolls (EUR)</th>\r\n                    <th className=\"px-3 py-2 border\">Total Cost (EUR)</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {routes.map((rt, index) => {\r\n                    let altDistance = 0;\r\n                    let altDuration = 0;\r\n                    rt.sections.forEach((section) => {\r\n                      if (section.summary) {\r\n                        altDistance += section.summary.length;\r\n                        altDuration += section.summary.duration;\r\n                      }\r\n                    });\r\n                    const km = altDistance / 1000;\r\n                    const { costPerKm } = computeRouteMetrics(rt);\r\n                    const hours = Math.floor(altDuration / 3600);\r\n                    const minutes = Math.floor((altDuration % 3600) / 60);\r\n                    const displayTime = `${hours}h ${minutes}m`;\r\n                    const routeTax = routeTaxCosts[index] || 0;\r\n                    const totalCost = costPerKm + routeTax;\r\n                    return (\r\n                      <tr key={index} className={`cursor-pointer ${selectedRouteIndex === index ? \"bg-blue-50\" : \"\"} hover:bg-gray-50`} onClick={() => handleRouteSelect(index)}>\r\n                        <td className=\"px-3 py-2 border text-center\">Route {index + 1}</td>\r\n                        <td className=\"px-3 py-2 border text-center\">{km.toFixed(2)}</td>\r\n                        <td className=\"px-3 py-2 border text-center\">{displayTime}</td>\r\n                        <td className=\"px-3 py-2 border text-center\">{costPerKm.toFixed(2)}</td>\r\n                        <td className=\"px-3 py-2 border text-center\">{routeTax.toFixed(2)}</td>\r\n                        <td className=\"px-3 py-2 border text-center\">{totalCost.toFixed(2)}</td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n\r\n          {/* ROW 3: List of aggregated costs + Route Results */}\r\n          {routes.length > 0 && (\r\n            <div className=\"flex space-x-4\">\r\n              <div className=\"w-1/2 bg-white p-4 rounded shadow-sm\">\r\n                <h3 className=\"text-md font-semibold mb-2\">List of aggregated costs</h3>\r\n                {tollCosts[selectedRouteIndex] &&\r\n                tollCosts[selectedRouteIndex].tollList &&\r\n                tollCosts[selectedRouteIndex].tollList.length > 0 ? (\r\n                  <ul className=\"space-y-1 text-sm text-gray-700 max-h-40 overflow-y-auto\">\r\n                    {tollCosts[selectedRouteIndex].tollList.map((toll, idx) => (\r\n                      <li key={idx} className={`px-2 py-1 ${idx % 2 === 0 ? \"bg-white\" : \"bg-gray-100\"}`}>\r\n                        {toll.name} - {toll.country}: {toll.cost.toFixed(2)} {toll.currency || \"EUR\"}\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                ) : (\r\n                  <p className=\"text-gray-500\">Loading toll costs...</p>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"w-1/2 bg-white p-4 rounded shadow-sm\">\r\n                <h3 className=\"text-md font-semibold mb-2\">Route Results</h3>\r\n                {distance ? (\r\n                  <>\r\n                    <p className=\"text-sm text-gray-700\">\r\n                      <strong>Distance:</strong> {distance} km\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-700\">\r\n                      <strong>Travel time:</strong> {duration}\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-700\">\r\n                      <strong>Price per Km:</strong>{\" \"}\r\n                      {distance && vehicleType.EuroPerKm ? (distance * vehicleType.EuroPerKm).toFixed(2) : \"0.00\"} EUR\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-700\">\r\n                      <strong>Tolls:</strong> {routeTaxCosts[selectedRouteIndex] ? routeTaxCosts[selectedRouteIndex].toFixed(2) : \"0.00\"} EUR\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-700 font-semibold\">\r\n                      <strong>Total Cost:</strong>{\" \"}\r\n                      {distance && vehicleType.EuroPerKm\r\n                        ? (costPerKmForSelected() + (routeTaxCosts[selectedRouteIndex] || 0)).toFixed(2)\r\n                        : routeTaxCosts[selectedRouteIndex]\r\n                        ? routeTaxCosts[selectedRouteIndex].toFixed(2)\r\n                        : \"0.00\"} EUR\r\n                    </p>\r\n                  </>\r\n                ) : (\r\n                  <p className=\"text-gray-500\">There are no results available.</p>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* ROW 4: Buton salvare ruta */}\r\n          {routes.length > 0 && (\r\n            <div className=\"mt-4 p-4 border rounded bg-gray-50\">\r\n              <h3 className=\"font-semibold mb-2\">Save this route</h3>\r\n\r\n              <div className=\"flex flex-row gap-4 items-end mb-4\">\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm\">Truck Plate</label>\r\n                  <input\r\n                    className=\"border p-1 w-full\"\r\n                    placeholder=\"e.g. TM 00 RTS\"\r\n                    value={plate}\r\n                    onChange={e => setPlate(e.target.value)}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"flex-1\">\r\n                  <label className=\"block text-sm\">Tour Number</label>\r\n                  <input\r\n                    className=\"border p-1 w-full\"\r\n                    placeholder=\"unique ID\"\r\n                    value={identifier}\r\n                    onChange={e => setIdentifier(e.target.value)}\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <button\r\n                    onClick={handleSaveRoute}\r\n                    className=\"bg-green-600 text-white px-4 py-2\"\r\n                  >\r\n                    Save Route\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              {saveMsg && <p className=\"mt-2 text-sm\">{saveMsg}</p>}\r\n            </div>\r\n          )}\r\n\r\n        </div>\r\n\r\n        {/* RIGHT SIDE - MAP */}\r\n        <div className=\"w-1/2 h-full\" id=\"mapContainer\"></div>\r\n      </div>\r\n\r\n      {/* FOOTER */}\r\n      <footer className=\"bg-white border-t border-gray-200 p-4 text-center text-sm text-gray-500\">\r\n        © 2025 Route Truck Wizard - Planificare rute și calcul taxe rutiere pentru camioane\r\n      </footer>\r\n\r\n      {/* Montăm un TollCalculator (invizibil) pentru fiecare rută */}\r\n      <div style={{ display: \"none\" }}>\r\n        {routes.map((route, index) => (\r\n          <TollCalculator\r\n            key={index}\r\n            startCoordinates={addresses.length >= 2 ? addresses[0] : null}\r\n            endCoordinates={addresses.length >= 2 ? addresses[addresses.length - 1] : null}\r\n            intermediatePoints={addresses.length > 2 ? addresses.slice(1, addresses.length - 1) : []}\r\n            vehicleType={vehicleType}\r\n            rawDuration={rawDuration}\r\n            rawDistance={rawDistance}\r\n            selectedRoute={route}\r\n            onTollUpdate={(tollData) => updateTollCostForRoute(index, tollData)}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useRef, useState } from \"react\";\r\n// import L from \"leaflet\";\r\n// import \"leaflet-routing-machine\";\r\n// import \"leaflet/dist/leaflet.css\";\r\n// import AutoCompleteInput from \"./AutoCompleteInput\";\r\n// import TollCalculator from \"./TollCalculator\";\r\n// import \"./App.css\";\r\n\r\n// const App = () => {\r\n//   const [activeTab, setActiveTab] = useState(\"input\"); // \"input\" | \"results\"\r\n//   const [addresses, setAddresses] = useState([]);\r\n//   const [distance, setDistance] = useState(null);\r\n//   const [routes, setRoutes] = useState([]); // store alternative routes\r\n//   const [selectedRouteIndex, setSelectedRouteIndex] = useState(null);\r\n//   const [vehicleType, setVehicleType] = useState({\r\n//     axles: 5,\r\n//     weight: 40000,\r\n//     EuroPerKm: 0,\r\n//   });\r\n//   const [tollCost, setTollCost] = useState({ totalCost: 0, tollList: [] });\r\n//   const [duration, setDuration] = useState(null);\r\n//   const [rawDistance, setRawDistance] = useState(null);\r\n//   const [rawDuration, setRawDuration] = useState(null);\r\n\r\n//   const mapRef = useRef(null);\r\n\r\n//   // Callback for adding an address\r\n//   const addAddress = (coordsWithLabel) => {\r\n//     setAddresses((prev) => [...prev, coordsWithLabel]);\r\n//   };\r\n\r\n//   const moveUp = (index) => {\r\n//     if (index === 0) return;\r\n//     const newArr = [...addresses];\r\n//     [newArr[index - 1], newArr[index]] = [newArr[index], newArr[index - 1]];\r\n//     setAddresses(newArr);\r\n//   };\r\n\r\n//   const moveDown = (index) => {\r\n//     if (index === addresses.length - 1) return;\r\n//     const newArr = [...addresses];\r\n//     [newArr[index], newArr[index + 1]] = [newArr[index + 1], newArr[index]];\r\n//     setAddresses(newArr);\r\n//   };\r\n\r\n//   const removeAddress = (index) => {\r\n//     const newArr = [...addresses];\r\n//     newArr.splice(index, 1);\r\n//     setAddresses(newArr);\r\n//   };\r\n\r\n//   const getRoute = async () => {\r\n//     if (addresses.length < 2) {\r\n//       alert(\"Te rog introdu cel puțin două adrese!\");\r\n//       return;\r\n//     }\r\n//     const startCoordinates = addresses[0];\r\n//     const endCoordinates = addresses[addresses.length - 1];\r\n//     const intermediatePoints = addresses.slice(1, addresses.length - 1);\r\n\r\n//     try {\r\n//       // Add alternative route support if available – adjust parameters as needed.\r\n//       let url = `https://router.hereapi.com/v8/routes?origin=${startCoordinates.lat},${startCoordinates.lng}`;\r\n//       intermediatePoints.forEach((point) => {\r\n//         url += `&via=${point.lat},${point.lng}`;\r\n//       });\r\n//       url += `&destination=${endCoordinates.lat},${endCoordinates.lng}`;\r\n//       url += `&return=polyline,summary,actions,instructions,tolls`;\r\n//       url += `&alternatives=3`; // request 3 alternative routes (if supported by your plan)\r\n//       url += `&transportMode=truck`;\r\n//       url += `&vehicle[height]=400`;\r\n//       url += `&vehicle[width]=255`;\r\n//       url += `&vehicle[length]=1600`;\r\n//       url += `&truck[axleCount]=${vehicleType.axles}`;\r\n//       url += `&vehicle[grossWeight]=${vehicleType.weight}`;\r\n//       url += `&tolls[emissionType]=euro6`;\r\n//       url += `&apikey=NtdXMcSjbr4h__U2wEhaC7i-4wTlX71ofanOwpm5E3s`;\r\n\r\n//       const response = await fetch(url);\r\n//       const data = await response.json();\r\n\r\n//       if (!data.routes || data.routes.length === 0) {\r\n//         console.error(\"No routes found:\", data);\r\n//         return;\r\n//       }\r\n\r\n//       // Save the alternative routes in state\r\n//       setRoutes(data.routes);\r\n//       // For now select the first route by default\r\n//       setSelectedRouteIndex(0);\r\n\r\n//       // Use the first route for display on the map and summary calculations\r\n//       displayRoute(data.routes[0]);\r\n\r\n//       if (data.routes[0].sections && data.routes[0].sections.length > 0) {\r\n//         let totalDistance = 0;\r\n//         let totalDuration = 0;\r\n//         data.routes[0].sections.forEach((section) => {\r\n//           if (section.summary) {\r\n//             totalDistance += section.summary.length;\r\n//             totalDuration += section.summary.duration;\r\n//           }\r\n//         });\r\n//         setDistance((totalDistance / 1000).toFixed(2));\r\n//         setRawDistance(totalDistance);\r\n//         setRawDuration(totalDuration);\r\n\r\n//         const hours = Math.floor(totalDuration / 3600);\r\n//         const minutes = Math.floor((totalDuration % 3600) / 60);\r\n//         setDuration(`${hours}h ${minutes}m`);\r\n//       }\r\n\r\n//       setActiveTab(\"results\");\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching route:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const displayRoute = (route) => {\r\n//     if (!mapRef.current) return;\r\n//     mapRef.current.getObjects().forEach((obj) => mapRef.current.removeObject(obj));\r\n//     route.sections.forEach((section) => {\r\n//       const lineString = window.H.geo.LineString.fromFlexiblePolyline(section.polyline);\r\n//       const routeLine = new window.H.map.Polyline(lineString, {\r\n//         style: { strokeColor: \"blue\", lineWidth: 6 },\r\n//       });\r\n//       mapRef.current.addObject(routeLine);\r\n//       const boundingBox = routeLine.getBoundingBox();\r\n//       if (boundingBox) {\r\n//         mapRef.current.getViewModel().setLookAtData({ bounds: boundingBox });\r\n//       }\r\n//     });\r\n//   };\r\n\r\n//   // This callback is triggered when TollCalculator returns the toll details\r\n//   const handleTollUpdate = (tollData) => {\r\n//     // IMPORTANT: Check if you are dividing the toll cost by 2.\r\n//     // Remove any division so that the full toll is used.\r\n//     setTollCost(tollData);\r\n//     if (tollData.duration) {\r\n//       setDuration(tollData.duration);\r\n//     }\r\n//   };\r\n\r\n//   // When an alternative row is clicked, update the map and toll info:\r\n//   const handleRouteSelect = (index) => {\r\n//     setSelectedRouteIndex(index);\r\n//     displayRoute(routes[index]);\r\n//     // Recalculate the summary for the selected route:\r\n//     if (routes[index].sections && routes[index].sections.length > 0) {\r\n//       let totalDistance = 0;\r\n//       let totalDuration = 0;\r\n//       routes[index].sections.forEach((section) => {\r\n//         if (section.summary) {\r\n//           totalDistance += section.summary.length;\r\n//           totalDuration += section.summary.duration;\r\n//         }\r\n//       });\r\n//       setDistance((totalDistance / 1000).toFixed(2));\r\n//       setRawDistance(totalDistance);\r\n//       setRawDuration(totalDuration);\r\n//       const hours = Math.floor(totalDuration / 3600);\r\n//       const minutes = Math.floor((totalDuration % 3600) / 60);\r\n//       setDuration(`${hours}h ${minutes}m`);\r\n//     }\r\n//     // If needed, trigger TollCalculator update for the selected route.\r\n//     // This depends on how TollCalculator is implemented.\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     await getRoute();\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (mapRef.current) return;\r\n//     const platform = new window.H.service.Platform({\r\n//       apikey: \"NtdXMcSjbr4h__U2wEhaC7i-4wTlX71ofanOwpm5E3s\",\r\n//     });\r\n//     const defaultLayers = platform.createDefaultLayers();\r\n//     const map = new window.H.Map(\r\n//       document.getElementById(\"mapContainer\"),\r\n//       defaultLayers.vector.normal.map,\r\n//       { zoom: 6, center: { lat: 44.4268, lng: 26.1025 } }\r\n//     );\r\n//     new window.H.ui.UI.createDefault(map, defaultLayers);\r\n//     new window.H.mapevents.Behavior(new window.H.mapevents.MapEvents(map));\r\n//     mapRef.current = map;\r\n//     window.addEventListener(\"resize\", () => map.getViewPort().resize());\r\n//     return () => {\r\n//       window.removeEventListener(\"resize\", () => map.getViewPort().resize());\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"App flex flex-col h-screen\">\r\n//       {/* HEADER */}\r\n//       <header className=\"bg-white shadow-sm p-4 flex items-center justify-between\">\r\n//         <div className=\"flex items-center gap-2\">\r\n//           <svg\r\n//             xmlns=\"http://www.w3.org/2000/svg\"\r\n//             className=\"h-6 w-6 text-blue-600\"\r\n//             fill=\"none\"\r\n//             viewBox=\"0 0 24 24\"\r\n//             stroke=\"currentColor\"\r\n//           >\r\n//             <path\r\n//               strokeLinecap=\"round\"\r\n//               strokeLinejoin=\"round\"\r\n//               strokeWidth={2}\r\n//               d=\"M9 2l.01 6L7 8c0 1.333 4 2 4 2s4-.667 4-2l-2-.01V2H9zM3 13h7v7H5.5a2.5 2.5 0 01-2.5-2.5V13zM21 13h-7v7h4.5a2.5 2.5 0 002.5-2.5V13z\"\r\n//             />\r\n//           </svg>\r\n//           <h1 className=\"text-xl font-bold text-gray-800\">Rossik Route Calculation</h1>\r\n//         </div>\r\n//       </header>\r\n  \r\n//       {/* MAIN CONTENT: LEFT (rows) + RIGHT (map) */}\r\n//       <div className=\"flex flex-row flex-1 overflow-hidden\">\r\n        \r\n//         {/* LEFT SIDE (50% width) */}\r\n//         <div className=\"w-1/2 p-4 overflow-auto space-y-4\">\r\n          \r\n//           {/* ROW 1: Two columns – Adress + Vehicle Parameters */}\r\n//           <div className=\"flex space-x-4\">\r\n            \r\n//             {/* Adress column (50% of Row 1) */}\r\n//             <div className=\"w-1/2 bg-white p-4 rounded shadow-sm\">\r\n//               <h2 className=\"text-lg font-semibold mb-2\">Address</h2>\r\n//               <form onSubmit={handleSubmit} className=\"flex flex-col gap-3\">\r\n//                 <div>\r\n//                   <label className=\"block mb-1 font-medium text-sm text-gray-700\">\r\n//                     Enter the address:\r\n//                   </label>\r\n//                   <AutoCompleteInput\r\n//                     apiKey=\"NtdXMcSjbr4h__U2wEhaC7i-4wTlX71ofanOwpm5E3s\"\r\n//                     onSelect={addAddress}\r\n//                   />\r\n//                 </div>\r\n//                 {addresses.length === 0 && (\r\n//                   <p className=\"text-sm text-gray-500\">No address entered.</p>\r\n//                 )}\r\n//                 <ul className=\"border rounded p-2 max-h-40 overflow-y-auto space-y-1\">\r\n//                   {addresses.map((point, index) => (\r\n//                     <li key={index} className=\"flex justify-between items-center\">\r\n//                       <div className=\"text-sm text-gray-800\">\r\n//                         {point.label || `Lat: ${point.lat}, Lng: ${point.lng}`}\r\n//                       </div>\r\n//                       <div className=\"flex gap-2\">\r\n//                         <button\r\n//                           type=\"button\"\r\n//                           onClick={() => moveUp(index)}\r\n//                           className=\"text-xs text-blue-600 hover:underline\"\r\n//                         >\r\n//                           Up\r\n//                         </button>\r\n//                         <button\r\n//                           type=\"button\"\r\n//                           onClick={() => moveDown(index)}\r\n//                           className=\"text-xs text-blue-600 hover:underline\"\r\n//                         >\r\n//                           Down\r\n//                         </button>\r\n//                         <button\r\n//                           type=\"button\"\r\n//                           onClick={() => removeAddress(index)}\r\n//                           className=\"text-xs text-red-600 hover:underline\"\r\n//                         >\r\n//                           X\r\n//                         </button>\r\n//                       </div>\r\n//                     </li>\r\n//                   ))}\r\n//                 </ul>\r\n  \r\n//                 <button\r\n//                   type=\"submit\"\r\n//                   className=\"mt-3 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded font-semibold text-sm\"\r\n//                 >\r\n//                   Calculate route\r\n//                 </button>\r\n//               </form>\r\n//             </div>\r\n  \r\n//             {/* Vehicle Parameters column (50% of Row 1) */}\r\n//             <div className=\"w-1/2 bg-white p-4 rounded shadow-sm\">\r\n//               <h2 className=\"text-lg font-semibold mb-2\">Vehicle Parameters</h2>\r\n//               <div className=\"grid grid-cols-1 gap-2\">\r\n//                 {/* Number of axles */}\r\n//                 <div>\r\n//                   <label className=\"block text-sm font-medium mb-1\">Number of axles</label>\r\n//                   <input\r\n//                     type=\"number\"\r\n//                     name=\"axles\"\r\n//                     value={vehicleType.axles}\r\n//                     onChange={(e) => {\r\n//                       const value = parseFloat(e.target.value);\r\n//                       setVehicleType((prev) => ({\r\n//                         ...prev,\r\n//                         axles: isNaN(value) ? prev.axles : value,\r\n//                       }));\r\n//                     }}\r\n//                     min=\"2\"\r\n//                     max=\"10\"\r\n//                     className=\"border rounded w-full p-1 text-sm\"\r\n//                   />\r\n//                 </div>\r\n  \r\n//                 {/* Tonnage */}\r\n//                 <div>\r\n//                   <label className=\"block text-sm font-medium mb-1\">Tonnage (kg)</label>\r\n//                   <input\r\n//                     type=\"number\"\r\n//                     name=\"weight\"\r\n//                     value={vehicleType.weight}\r\n//                     onChange={(e) => {\r\n//                       const value = parseFloat(e.target.value);\r\n//                       setVehicleType((prev) => ({\r\n//                         ...prev,\r\n//                         weight: isNaN(value) ? prev.weight : value,\r\n//                       }));\r\n//                     }}\r\n//                     min=\"1000\"\r\n//                     max=\"60000\"\r\n//                     className=\"border rounded w-full p-1 text-sm\"\r\n//                   />\r\n//                 </div>\r\n  \r\n//                 {/* Euro per km */}\r\n//                 <div>\r\n//                   <label className=\"block text-sm font-medium mb-1\">Euro/km</label>\r\n//                   <input\r\n//                     type=\"number\"\r\n//                     inputMode=\"decimal\"\r\n//                     step=\"0.01\"\r\n//                     name=\"EuroPerKm\"\r\n//                     value={vehicleType.EuroPerKm}\r\n//                     onChange={(e) => {\r\n//                       const raw = e.target.value.trim().replace(\",\", \".\");\r\n//                       const parsed = parseFloat(raw);\r\n//                       setVehicleType((prev) => ({\r\n//                         ...prev,\r\n//                         EuroPerKm: isNaN(parsed) ? prev.EuroPerKm : parsed,\r\n//                       }));\r\n//                     }}\r\n//                     min=\"0\"\r\n//                     max=\"10\"\r\n//                     className=\"border rounded w-full p-1 text-sm\"\r\n//                   />\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n  \r\n//           {/* ROW 2: Alternative Routes (full width of left side) */}\r\n//           {routes.length > 0 && (\r\n//             <div className=\"w-full bg-white p-4 rounded shadow-sm\">\r\n//               <h2 className=\"text-md font-semibold mb-2\">Alternative Routes</h2>\r\n//               <table className=\"min-w-full text-sm border border-gray-200\">\r\n//                 <thead>\r\n//                   <tr className=\"bg-gray-50\">\r\n//                     <th className=\"px-3 py-2 border\">Route</th>\r\n//                     <th className=\"px-3 py-2 border\">Distance (km)</th>\r\n//                     <th className=\"px-3 py-2 border\">Time</th>\r\n//                     <th className=\"px-0 py-2 border\">Price per Km (EUR)</th>\r\n//                     <th className=\"px-3 py-2 border\">Tolls (EUR)</th>\r\n//                     <th className=\"px-3 py-2 border\">Total Cost (EUR)</th>\r\n//                   </tr>\r\n//                 </thead>\r\n//                 <tbody>\r\n//                   {routes.map((rt, index) => {\r\n//                     // Summaries for this route\r\n//                     let altDistance = 0;\r\n//                     let altDuration = 0;\r\n//                     rt.sections.forEach((section) => {\r\n//                       if (section.summary) {\r\n//                         altDistance += section.summary.length;\r\n//                         altDuration += section.summary.duration;\r\n//                       }\r\n//                     });\r\n//                     const km = (altDistance / 1000).toFixed(2);\r\n//                     const hours = Math.floor(altDuration / 3600);\r\n//                     const minutes = Math.floor((altDuration % 3600) / 60);\r\n//                     const displayTime = `${hours}h ${minutes}m`;\r\n  \r\n//                     // Example toll calculation\r\n//                     const tolls = rt.tolls\r\n//                       ? rt.tolls.reduce((acc, toll) => acc + (toll.fares[0].price.value || 0), 0)\r\n//                       : 0;\r\n//                     const costPerKm = km * (vehicleType.EuroPerKm || 0);\r\n//                     const totalCost = tolls + costPerKm;\r\n  \r\n//                     return (\r\n//                       <tr\r\n//                         key={index}\r\n//                         className={`cursor-pointer ${selectedRouteIndex === index ? \"bg-blue-50\" : \"\"}`}\r\n//                         onClick={() => handleRouteSelect(index)}\r\n//                       >\r\n//                         <td className=\"px-3 py-2 border text-center\">Route {index + 1}</td>\r\n//                         <td className=\"px-3 py-2 border text-center\">{km}</td>\r\n//                         <td className=\"px-3 py-2 border text-center\">{displayTime}</td>\r\n//                         <td className=\"px-3 py-2 border text-center\">{totalCost.toFixed(2)}</td>\r\n//                         <td className=\"px-3 py-2 border text-center\">{tollCost.totalCost.toFixed(2)}</td>\r\n//                         <td className=\"px-3 py-2 border text-center\">{distance && vehicleType.EuroPerKm\r\n//                         ? (distance * vehicleType.EuroPerKm + tollCost.totalCost).toFixed(2)\r\n//                         : tollCost.totalCost.toFixed(2)}</td>\r\n\r\n//                       </tr>\r\n//                     );\r\n//                   })}\r\n//                 </tbody>\r\n//               </table>\r\n//             </div>\r\n//           )}\r\n  \r\n//           {/* ROW 3: Two columns – List of aggregated costs + Route Results */}\r\n//           {routes.length > 0 && (\r\n//             <div className=\"flex space-x-4\">\r\n//               {/* List of aggregated costs */}\r\n//               <div className=\"w-1/2 bg-white p-4 rounded shadow-sm\">\r\n//                 <h3 className=\"text-md font-semibold mb-2\">List of aggregated costs</h3>\r\n//                 {tollCost?.tollList?.length > 0 ? (\r\n//                   <ul className=\"space-y-1 text-sm text-gray-700 max-h-40 overflow-y-auto\">\r\n//                     {tollCost.tollList.map((toll, index) => (\r\n//                       <li \r\n//                       key={index}\r\n//                       className={`px-2 py-1 ${index % 2 === 0 ? \"bg-white\" : \"bg-gray-100\"}`}\r\n//                       >\r\n//                         {toll.name} - {toll.country}: {toll.cost.toFixed(2)} {\"EUR\"}\r\n//                       </li>\r\n//                     ))}\r\n//                   </ul>\r\n//                 ) : (\r\n//                   <p className=\"text-gray-500\">No individual fees available.</p>\r\n//                 )}\r\n//               </div>\r\n  \r\n//               {/* Route Results */}\r\n//               <div className=\"w-1/2 bg-white p-4 rounded shadow-sm\">\r\n//                 <h3 className=\"text-md font-semibold mb-2\">Route Results</h3>\r\n//                 {distance ? (\r\n//                   <>\r\n//                     <p className=\"text-sm text-gray-700\">\r\n//                       <strong>Distance:</strong> {distance} km\r\n//                     </p>\r\n//                     <p className=\"text-sm text-gray-700\">\r\n//                       <strong>Travel time:</strong> {duration}\r\n//                     </p>\r\n//                     <p className=\"text-sm text-gray-700\">\r\n//                       <strong>Price per Km:</strong>{\" \"}\r\n//                       {distance && vehicleType.EuroPerKm\r\n//                         ? (distance * vehicleType.EuroPerKm).toFixed(2)\r\n//                         : 0}{\" \"}\r\n//                       EUR\r\n//                     </p>\r\n//                     <p className=\"text-sm text-gray-700\">\r\n//                       <strong>Tolls:</strong> {tollCost.totalCost.toFixed(2)} EUR\r\n//                     </p>\r\n//                     <p className=\"text-sm text-gray-700\">\r\n//                       <strong>Total Cost:</strong>{\" \"}\r\n//                       {distance && vehicleType.EuroPerKm\r\n//                         ? (distance * vehicleType.EuroPerKm + tollCost.totalCost).toFixed(2)\r\n//                         : tollCost.totalCost.toFixed(2)}{\" \"}\r\n//                       EUR\r\n//                     </p>\r\n//                   </>\r\n//                 ) : (\r\n//                   <p className=\"text-gray-500\">There are no results available.</p>\r\n//                 )}\r\n//               </div>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n  \r\n//         {/* RIGHT SIDE (50% width) – MAP */}\r\n//         <div className=\"w-1/2 h-full\" id=\"mapContainer\">\r\n//         </div>\r\n//       </div>\r\n  \r\n//       {/* FOOTER */}\r\n//       <footer className=\"bg-white border-t border-gray-200 p-4 text-center text-sm text-gray-500\">\r\n//         © 2025 Route Truck Wizard - Planificare rute și calcul taxe rutiere pentru camioane\r\n//       </footer>\r\n  \r\n//       {/* TollCalculator logic */}\r\n//       <TollCalculator\r\n//         startCoordinates={addresses.length >= 2 ? addresses[0] : null}\r\n//         endCoordinates={addresses.length >= 2 ? addresses[addresses.length - 1] : null}\r\n//         intermediatePoints={addresses.length > 2 ? addresses.slice(1, addresses.length - 1) : []}\r\n//         vehicleType={vehicleType}\r\n//         rawDuration={rawDuration}\r\n//         rawDistance={rawDistance}\r\n//         onTollUpdate={handleTollUpdate}\r\n//         // Use selectedRouteIndex to send the selected route if desired\r\n//         selectedRoute={selectedRouteIndex !== null ? routes[selectedRouteIndex] : null}\r\n//       />\r\n//     </div>\r\n//   );\r\n  \r\n// };\r\n\r\n// export default App;\r\n\r\n","// frontend/src/HistoryPage.js\r\nimport React from 'react';\r\n\r\nexport default function HistoryPage({ user }) {\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h2 className=\"text-xl font-bold mb-4\">History Page</h2>\r\n      <p>Welcome, {user?.username || 'guest'}. Here you'll see your saved routes history.</p>\r\n      {/* aici vei pune în viitor tabelul cu istoricul curselor */}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport LoginPage from './Login';\nimport MainPage from './MainPage';\nimport HistoryPage from './HistoryPage';\nimport { supabase } from './lib/supabase'; \n\nfunction App() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // 1. setează token-ul în supabase client\n  useEffect(() => {\n    const token = sessionStorage.getItem('sb_token');\n    if (token) {\n      supabase.auth.setAuth(token);\n    }\n  }, []);\n\n  // 2. ascultă schimbări de auth & aduce user curent\n  useEffect(() => {\n    // curent la reload\n    supabase.auth.getUser().then(({ data: { user } }) => {\n      setUser(user);\n    });\n\n    // pe viitor, dacă fresh login/logout\n    const { data: listener } = supabase.auth.onAuthStateChange(\n      (_event, session) => {\n        setUser(session?.user ?? null);\n      }\n    );\n    return () => {\n      listener.subscription.unsubscribe();\n    };\n  }, []);\n\n  return (\n    <Router>\n      <Routes>\n\n        <Route\n          path=\"/login\"\n          element={user ? <Navigate to=\"/\" /> : <LoginPage />}\n        />\n        <Route\n          path=\"/\"\n          element={user ? <MainPage /> : <Navigate to=\"/login\" />}\n        />\n        <Route\n          path=\"/history\"\n          element={user ? <HistoryPage /> : <Navigate to=\"/login\" />}\n        />\n\n        {/* 3) Catch‑all: if no route matched, redirect appropriately */}\n        <Route\n          path=\"*\"\n          element={\n            user\n              ? <Navigate to=\"/\" replace/>\n              : <Navigate to=\"/login\" replace/>\n          }\n        />\n      </Routes>\n    </Router>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}