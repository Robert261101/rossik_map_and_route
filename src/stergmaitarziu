return (
  <div className="App flex flex-col h-full">
    {/* HEADER */}
    <header className="bg-white shadow-sm p-4 flex items-center justify-between">
      <div className="flex items-center gap-2">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          className="h-6 w-6 text-blue-600"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M9 2l.01 6L7 8c0 1.333 4 2 4 2s4-.667 4-2l-2-.01V2H9zM3 13h7v7H5.5a2.5 2.5 0 01-2.5-2.5V13zM21 13h-7v7h4.5a2.5 2.5 0 002.5-2.5V13z"
          />
        </svg>
        <h1 className="text-xl font-bold text-gray-800">Truck Route Calculation</h1>
      </div>
    </header>

    {/* CONȚINUT PRINCIPAL: Sidebar și Harta */}
    <div className="flex flex-row flex-1 overflow-hidden">
      {/* Sidebar: toate elementele de control */}
      <div className="sidebar w-1/2 overflow-auto px-4 py-4">
        {/* Tab Navigation – plasat doar în sidebar, centrat */}
        <div className="flex justify-center mb-4">
          <button
            onClick={() => setActiveTab("input")}
            className={`px-4 py-2 text-sm font-medium ${
              activeTab === "input"
                ? "text-blue-600 border-b-2 border-blue-600"
                : "text-gray-600 hover:text-blue-500"
            }`}
          >
            Data Entry
          </button>
          <button
            onClick={() => setActiveTab("results")}
            className={`ml-4 px-4 py-2 text-sm font-medium ${
              activeTab === "results"
                ? "text-blue-600 border-b-2 border-blue-600"
                : "text-gray-600 hover:text-blue-500"
            }`}
          >
            Result
          </button>
        </div>

        {/* Conținutul din tabul activ */}
        {activeTab === "input" && (
          <div className="space-y-4">
            <div className="bg-white p-4 rounded shadow-sm">
              <h2 className="text-lg font-semibold mb-2">Addresses</h2>
              <form onSubmit={handleSubmit} className="flex flex-col gap-3">
                <div>
                  <label className="block mb-1 font-medium text-sm text-gray-700">
                  Enter the address:
                  </label>
                  <AutoCompleteInput
                    apiKey="NtdXMcSjbr4h__U2wEhaC7i-4wTlX71ofanOwpm5E3s"
                    onSelect={addAddress}
                  />
                </div>
                {addresses.length === 0 && (
                  <p className="text-sm text-gray-500">No address entered.</p>
                )}
                <ul className="border rounded p-2 max-h-40 overflow-y-auto space-y-1">
                  {addresses.map((point, index) => (
                    <li key={index} className="flex justify-between items-center">
                      <div className="text-sm text-gray-800">
                        {point.label || `Lat: ${point.lat}, Lng: ${point.lng}`}
                      </div>
                      <div className="flex gap-1">
                        <button
                          type="button"
                          onClick={() => moveUp(index)}
                          className="text-xs text-blue-600 hover:underline"
                        >
                          Up
                        </button>
                        <button
                          type="button"
                          onClick={() => moveDown(index)}
                          className="text-xs text-blue-600 hover:underline"
                        >
                          Down
                        </button>
                        <button
                          type="button"
                          onClick={() => removeAddress(index)}
                          className="text-xs text-red-600 hover:underline"
                        >
                          X
                        </button>
                      </div>
                    </li>
                  ))}
                </ul>

                <div className="bg-gray-50 p-2 rounded mt-3">
                  <h3 className="font-semibold mb-2">Vehicle parameters</h3>
                  <div className="grid grid-cols-3 gap-2">
                    <div>
                      <label className="block text-sm font-medium mb-1">Number of axles</label>
                      <input
                        type="number"
                        name="axles"
                        value={vehicleType.axles}
                        onChange={(e) => {
                          const value = parseFloat(e.target.value);
                          setVehicleType((prev) => ({
                            ...prev,
                            axles: isNaN(value) ? prev.axles : value,
                          }));
                        }}
                        min="2"
                        max="10"
                        className="border rounded w-full p-1 text-sm"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium mb-1">Tonnage (kg)</label>
                      <input
                        type="number"
                        name="weight"
                        value={vehicleType.weight}
                        onChange={(e) => {
                          const value = parseFloat(e.target.value);
                          setVehicleType((prev) => ({
                            ...prev,
                            weight: isNaN(value) ? prev.weight : value,
                          }));
                        }}
                        min="1000"
                        max="60000"
                        className="border rounded w-full p-1 text-sm"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium mb-1">Euro/km</label>
                      <input
                        type="number"
                        inputMode="decimal"
                        step="0.01"
                        name="EuroPerKm"
                        value={vehicleType.EuroPerKm}
                        onChange={(e) => {
                          const raw = e.target.value.trim().replace(",", ".");
                          const parsed = parseFloat(raw);
                          setVehicleType((prev) => ({
                            ...prev,
                            EuroPerKm: isNaN(parsed) ? prev.EuroPerKm : parsed,
                          }));
                        }}
                        min="0"
                        max="10"
                        className="border rounded w-full p-1 text-sm"
                      />
                    </div>
                  </div>
                </div>

                <button
                  type="submit"
                  className="mt-3 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded font-semibold text-sm"
                >
                  Calculate route
                </button>
              </form>
            </div>
          </div>
        )}

        {activeTab === "results" && (
          <div className="space-y-4">
            <div className="bg-white p-4 rounded shadow-sm">
              <h2 className="text-lg font-semibold mb-2">Route Results</h2>
              {distance ? (
                <>
                  <p className="text-sm text-gray-700"><strong>Distance:</strong> {distance} km</p>
                  <p className="text-sm text-gray-700"><strong>Travel time:</strong> {duration}</p>
                  <p className="text-sm text-gray-700">
                    <strong>Price per Km:</strong>{" "}
                    {distance && vehicleType.EuroPerKm
                      ? (distance * vehicleType.EuroPerKm).toFixed(2)
                      : 0}{" "}
                    EUR
                  </p>
                  <p className="text-sm text-gray-700"><strong>Cost Taxes:</strong> {tollCost.totalCost.toFixed(2)} EUR</p>
                  <p className="text-sm text-gray-700">
                    <strong>Total Cost:</strong>{" "}
                    {distance && vehicleType.EuroPerKm
                      ? ((distance * vehicleType.EuroPerKm) + tollCost.totalCost).toFixed(2)
                      : tollCost.totalCost.toFixed(2)}{" "}
                    EUR
                  </p>
                </>
              ) : (
                <p className="text-gray-500">There are no results available.</p>
              )}
            </div>
            <div className="bg-white p-4 rounded shadow-sm">
              <h3 className="text-md font-semibold mb-2">List of segmented costs</h3>
              {tollCost?.tollList?.length > 0 ? (
                <ul className="space-y-1 text-sm text-gray-700 max-h-40 overflow-y-auto">
                  {tollCost.tollList.map((toll, index) => (
                    <li key={index}>
                      {toll.name} - {toll.country}: {toll.cost.toFixed(2)} {toll.currency}
                    </li>
                  ))}
                </ul>
              ) : (
                <p className="text-gray-500">No individual fees available.</p>
              )}
              <button
                onClick={() => setActiveTab("input")}
                className="mt-3 bg-gray-200 hover:bg-gray-300 text-sm px-3 py-2 rounded"
              >
                Back to data entry
              </button>
            </div>
          </div>
        )}
      </div>

      {/* Harta */}
      <div className="w-1/2 h-full" id="mapContainer" />
    </div>

    {/* FOOTER */}
    <footer className="bg-white border-t border-gray-200 p-4 text-center text-sm text-gray-500">
      © 2025 Route Truck Wizard - Planificare rute și calcul taxe rutiere pentru camioane
    </footer>

    {/* TollCalculator (logică) */}
    <TollCalculator
      startCoordinates={addresses.length >= 2 ? addresses[0] : null}
      endCoordinates={addresses.length >= 2 ? addresses[addresses.length - 1] : null}
      intermediatePoints={addresses.length > 2 ? addresses.slice(1, addresses.length - 1) : []}
      vehicleType={vehicleType}
      rawDuration={rawDuration}
      rawDistance={rawDistance}
      onTollUpdate={handleTollUpdate}
    />
  </div>
);
};

export default App;